%!PS-Adobe-2.0
%%Creator: dvips(k) 5.998 Copyright 2018 Radical Eye Software
%%Title: Fig4.dvi
%%CreationDate: Fri Nov  8 10:04:55 2019
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 425 396
%%DocumentFonts: HFBR17 HFBRSY10 HFBRMI10 HFBR8 HFBRMI8 HFBR10 HFBRSY8
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips Fig4.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2019.11.08:1104
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: psfrag.pro 0 0
%%
%% This is file `psfrag.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% psfrag.dtx  (with options: `filepro')
%% 
%% Copyright (c) 1996 Craig Barratt, Michael C. Grant, and David Carlisle.
%% All rights reserved.
%% 
%% This file is part of the PSfrag package.
%% 
userdict begin
/PSfragLib 90 dict def
/PSfragDict 6 dict def
/PSfrag { PSfragLib begin load exec end } bind def
end
PSfragLib begin
/RO /readonly      load def
/CP /currentpoint  load def
/CM /currentmatrix load def
/B { bind RO def } bind def
/X { exch def } B
/MD { { X } forall } B
/OE { end exec PSfragLib begin } B
/S false def
/tstr 8 string def
/islev2 { languagelevel } stopped { false } { 2 ge } ifelse def
[ /sM /tM /srcM /dstM /dM /idM /srcFM /dstFM ] { matrix def } forall
sM currentmatrix RO pop
dM defaultmatrix RO idM invertmatrix RO pop
srcFM identmatrix pop
/Hide { gsave { CP } stopped not newpath clip { moveto } if } B
/Unhide { { CP } stopped not grestore { moveto } if } B
/setrepl islev2 {{ /glob currentglobal def true setglobal array astore
                   globaldict exch /PSfrags exch put glob setglobal }}
                {{ array astore /PSfrags X }} ifelse B
/getrepl islev2 {{ globaldict /PSfrags get aload length }}
                {{ PSfrags aload length }} ifelse B
/convert {
   /src X src length string
   /c 0 def src length {
      dup c src c get dup 32 lt { pop 32 } if put /c c 1 add def
   } repeat
} B
/Begin {
    /saver save def
    srcFM exch 3 exch put
    0 ne /debugMode X 0 setrepl
    dup /S exch dict def { S 3 1 roll exch convert exch put } repeat
    srcM CM dup invertmatrix pop
    mark { currentdict { end } stopped { pop exit } if } loop
    PSfragDict counttomark { begin } repeat pop
} B
/End {
    mark { currentdict end dup PSfragDict eq { pop exit } if } loop
    counttomark { begin } repeat pop
    getrepl saver restore
    7 idiv dup /S exch dict def {
        6 array astore /mtrx X tstr cvs /K X
        S K [ S K known { S K get aload pop } if mtrx ] put
    } repeat
} B
/Place {
    tstr cvs /K X
    S K known {
        bind /proc X tM CM pop
        CP /cY X /cX X
        0 0 transform idtransform neg /aY X neg /aX X
        S K get dup length /maxiter X
        /iter 1 def {
            iter maxiter ne { /saver save def } if
            tM setmatrix aX aY translate
            [ exch aload pop idtransform ] concat
            cX neg cY neg translate cX cY moveto
            /proc load OE
            iter maxiter ne { saver restore /iter iter 1 add def } if
        } forall
        /noXY { CP /cY X /cX X } stopped def
        tM setmatrix noXY { newpath } { cX cY moveto } ifelse
    } {
        Hide OE Unhide
    } ifelse
} B
/normalize {
    2 index dup mul 2 index dup mul add sqrt div
    dup 4 -1 roll exch mul 3 1 roll mul
} B
/replace {
    aload pop MD
    CP /bY X /lX X gsave sM setmatrix
    str stringwidth abs exch abs add dup 0 eq
        { pop } { 360 exch div dup scale } ifelse
    lX neg bY neg translate newpath lX bY moveto
    str { /ch X ( ) dup 0 ch put false charpath ch Kproc } forall
    flattenpath pathbbox [ /uY /uX /lY /lX ] MD
    CP grestore moveto
    currentfont /FontMatrix get dstFM copy dup
    0 get 0 lt { uX lX /uX X /lX X } if
    3 get 0 lt { uY lY /uY X /lY X } if
    /cX uX lX add 0.5 mul def
    /cY uY lY add 0.5 mul def
    debugMode { gsave 0 setgray 1 setlinewidth
        lX lY moveto lX uY lineto uX uY lineto uX lY lineto closepath
        lX bY moveto uX bY lineto lX cY moveto uX cY lineto
        cX lY moveto cX uY lineto stroke
    grestore } if
    dstFM dup invertmatrix dstM CM srcM
    2 { dstM concatmatrix } repeat pop
    getrepl /temp X
        S str convert get {
            aload pop [ /rot /scl /loc /K ] MD
            /aX cX def /aY cY def
            loc {
                dup 66  eq { /aY bY def } { % B
                dup 98  eq { /aY lY def } { % b
                dup 108 eq { /aX lX def } { % l
                dup 114 eq { /aX uX def } { % r
                dup 116 eq { /aY uY def }   % t
                if } ifelse } ifelse } ifelse } ifelse pop
            } forall
            K srcFM rot tM rotate dstM
            2 { tM concatmatrix } repeat aload pop pop pop
            2 { scl normalize 4 2 roll } repeat
            aX aY transform
            /temp temp 7 add def
        } forall
    temp setrepl
} B
/Rif {
    S 3 index convert known { pop replace } { exch pop OE } ifelse
} B
/XA { bind [ /Kproc /str } B /XC { ] 2 array astore def } B
/xs   { pop } XA XC
/xks  { /kern load OE } XA /kern XC
/xas  { pop ax ay rmoveto } XA /ay /ax XC
/xws  { c eq { cx cy rmoveto } if } XA /c /cy /cx XC
/xaws { ax ay rmoveto c eq { cx cy rmoveto } if }
    XA /ay /ax /c /cy /cx XC
/raws { xaws { awidthshow } Rif } B
/rws  { xws { widthshow } Rif } B
/rks  { xks { kshow } Rif } B
/ras  { xas { ashow } Rif } B
/rs   { xs { show } Rif } B
/rrs { getrepl dup 2 add -1 roll //restore exec setrepl } B
PSfragDict begin
islev2 not { /restore { /rrs PSfrag } B } if
/show       { /rs   PSfrag } B
/kshow      { /rks  PSfrag } B
/ashow      { /ras  PSfrag } B
/widthshow  { /rws  PSfrag } B
/awidthshow { /raws PSfrag } B
end PSfragDict RO pop
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: HFBR10
%!PS-AdobeFont-1.0: HFBR10 0.6
%%Title: HFBR10
%%CreationDate: Fri Nov 22 09:13:31 2002
%%Creator: Harald Harders
%%DocumentSuppliedResources: font HFBR10
% Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/HFBR10 known{/HFBR10 findfont dup/UniqueID known{dup
/UniqueID get 4214378 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /HFBR10 def
/FontBBox [-77 -223 1049 751 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (0.6) readonly def
/Notice (Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de) readonly def
/FullName (Computer Modern Bright) readonly def
/FamilyName (Computer Modern Bright) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 49 /one put
dup 76 /L put
dup 78 /N put
dup 99 /c put
dup 104 /h put
dup 108 /l put
dup 111 /o put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AC06351EB3A0C388F7EDE3D9D355D9933DBEDDB5162DB2
E065C95E6D27BCABD3175EE1CE0E7E7C00571B5081E595D70C9CF1647EB0F53F
7298F407369B5B2256D99F3ACE73EA11EA8AEF444CC2B95AA8888CDDD54FAA38
349925414B53EBA844547DF4B6776B552C3A8A5E1051C9F8E9F2B66BB6A3061F
C0282C9E8CD03BA95B247F97135B16F1DAB3994CDDECEE95D123686A5A904415
F44529729B8D918A05763E3E72ADB48EF91845262D727C5317E0EF57B941CB1E
F30E5BCB083CF9DA2934BA93AE9F58866761F5A6F06AF1593DC77775DCF4473A
1D9EA86FA4AEDDFDDA0862C71F7D6549EBC1D110ABFC616EBD848228C8C15827
B05174E11F2419EEA608A97607D38A899E0C835C7B87280FE33D83D12F9C1412
1E2192BF3FDDC35FF01837DB532F7C1E15D4A0FDE8770579643DFBE83F67B8C2
D5CF2F090455080C439E61514674B8F7052D1FD58C7CA74BAE5F3B1BCA3ECB96
DD1881E675ADF443DE3A105AC3D890DAF756B1970EE8DE34886804D790110FE4
88D09F26AB9A1BEDB993E313B478C5F3DCC8C4CFC410FD66134C4CED480A19C9
3FBA1B91D9B26595F4BA992AEF7035B0EE0C9FDD8C6B795E560D7B1CF90555E0
7FCA6CD43A263520F8F243E6AF9DD3B460124F5F78ED4C782899A87DEB5EF1B0
CEFDDAB76C3DD587301FFB94B17AE0CE33920ABEA864204512AC262882C7F76D
ECE373813F5120BF4508B8BEBBDAB1875F3593F45A9C0A57129453D006E389F9
25BEF5AE2780AAD722FA2EE02741E3BD050CAF5A2EC30D299986292940FC1F7C
BD69A7AB9006DA726370135CA257257ED4A4BDF609DF635F17CB030A4F871CF0
406493C97CDCDD240439C9D33D4212010A38B57A82AF52A14DB5E2EB4F8178B0
28CA1BC3EE7B5454FE8FB257F7422443EB3A0CC1E042A55A21F2525A8C5D3B39
46C92DA380590D680C5E9BA535A6C346A08DBE65B1C054C0587AFB35100BC5E2
D94108F8E37A48E97390C7C1AA1E0D92F5241BAC6A15727CE914A550A38CAA7A
FFE06A2759DA45FE05D46494A56D2A571C36557B76DC6FAB6230ED0075FE9575
9F01F3B7EA560346347B43A543D52D3F0687A49751BD7D60AC31A8ED3AF8897B
D16EBA220B626CAB57FFDEC73CBEF771A594437E6E1C6B0F15FB3102DB7A38D1
9236BDDF5936B95A2DB43452C78FB25F02D3C225AADBAE0C452EB77B9EB60BC8
E8DBAC5E4424AAD00FDBF455DFB59E53117FB961AD0BDD708C34E6B895AAB965
EFC895B0BA816AC3DEDD867490F168D3385ED7E65E5E97328618BF64DE4BEE2C
B0F263EF782C0D49E1B172BE416FEA0D359CBE04C83230BF3F1AC0969FAC0BC9
C73264E946226627968FA8AD8EFA4530AD6B0EEE03A3ADB919976D4DBFF11B24
6AF9C2FE922A89B6412452A1F976B7A481011C7FD0CFD23B1E1537EEEFB4AD78
2AAD5BC54327ABB731AC87BCD3AFBA75DAF2024A8E7745B78B6C62D99655F6A4
9B243AC3804EEB9BD2F314B4595C18B7A2C0EF1F5A33B8BE57F3810CE2CA3A0D
84229C2226465DBD27291A7AAD14E94142B39E0F40D59D152BB1F5E716D30A56
46F6E4A71E76C9340589046D29896E8D1807150C2282F119071DB33F3907EC73
E5B4F9B71156B357F62608909B7E4C5AEABF0EA6EC704BF556C274C0C815503D
B16E32DE24FFBBEEA87AB0EB9BB484F8FCAFB65D189D87550C6DD1B15ACB8BF1
1769DABF2A0A1C3058ABF110679DF54D878810964FF5E53F25285B542F3130B6
AC84AFB51C9A95C15573DC6DD4AF01750636932A81F9283FC5D2FF6DEF4366C1
C08E0B09855E04EC3BBD8CB6B0AF49D129C90A05B4082DC1A02EA0E2E87060FC
7E3E042C37B291851D973D08D99E12B578C4992EA47CC3DC1E61D6FBF0894C65
9A61F005C6FCE1A0E9700364A50525182B0BAC8AB381658DF10814D8C2A0F73A
00CDA13FA454AB5D18C53458547017249A28B7C05C01A939145A2BFE6D055580
AF134B7DDDBB9BAF9477472F3440752399F99D1DEC54747DBFABA108CAF4031E
849C7E0FF099162109E4C8B505BC4EAE56F9DB92C1A21268AFC408D019ADF2A2
0C75052F46FDB53266BA2E24012D4D6F088082D695E481FB78B86BAA23A747BD
CB7AAA479AEED2F233B51BF3D9A2A91F226AF6C253387F04D97042A8BD165987
D17B30479A245505752BEF7F9C9D4E4602EDEF6492A8AB391237137B5A5A8199
CB81ACDD096869581E002A8CC83AD69B466009BBD3F2BD829F18A73BA4F6BDA4
8AEF16E1AB71D7CB9DB5941387A78C1E733A92C8B97FF27348B1CDE901A40838
806C965228715A35D8C7887C76374C1C424C3943F0C4521DA28864D735B28426
EFA3D588D03882C916020091018865E23D6C0C9BA0696A6B6CCFE54DDE3A3120
EDAAD93A074010C5626DD9470582E82C1666D8D4E2DFC75C0F145FBEBB48466A
DB7CE834363875C5735B1D31B97ADF9F19968B705A15F296218F8A52C882FE42
A13FBBD93081B66089B77A4C5F593A9D3FA7C7612CE5A8FB6BE1032E15FD655D
82B6D2002C4DF4C12C5242448BB59429EB8B90D83D25BEF8F83308DC33A811D5
95D7A384B4B368D7BB819066BE60B085CE16D49B00628FA9EFB30BF936F5B010
131BBD9138FBCB2EA06035E03117F962E727FCF12AFAA45784358E679EE6B65C
FB15D18433689B53CEB507D30AF984FE8E124D60541106809431F630A971F937
14C992714F6E6FE2D3486CC11509AA18703851E2A98AAA2F02325A082CAB2EA7
EFE10F87F2DC4F254BA0FB5A34D87DE82D15731C8C541CA27DB3AAAD58BBB7B5
9A22E6E1F101B42605F2E2C4053C4647EA6B0F137AED6545F4991A1973CCBCDD
6C42F21C9F4230885B74D5CAF5BFA6C7FF55B4BC51161F753B29D6F83427FDC5
00CDE7F6A50B7B26F7C8A0B2561631344DFA9F60EBB39FFED924E2BB30983CB3
B0BAB4595950AA55B2CDF9F0380B2FF76DDCDCAFFB4B5B45BDA8419A9B93748C
3E27A30DDC7B04FA894F9D727582E507C168E74264FC153352224F34A471C6EF
A11B73A52891126E8325A6B7FEA40DAE3E05DBADA8AF7B5557B362CF0361DD5F
11393C070DAA021DE59653B18C341FBDF72215E0CFCDC1C70F8F732978CB578E
452FCA4014825357C6737BEB6FC825B62E484ABFF9B97876D11F9D37C5EECE20
A28D29245A4AFD3A056F5E8D541E023BC151D4D44327439D85036906DDD04012
179CA156AB432AB93009C0B499A18E0431705D2C12B770B6466A906ABFCC0BDE
D54DAFB56C4945A861B9DBC52121B607B1758B98D14F45223757EED1E6943F86
0DF2317F5232F78CBDA8F89473C6F131365F8CF3D75CCFFE9EDAB61500195949
A7C0A386BB54068380F7347E06D9C77E08FCF101D38F5407A9233CBF58D9EB6F
42B3A0A8FE56CCBFDE9B344890C6439E304A5F4D101173DBF28A57B5A3A84E06
9DB2C4B655442083C3275F56E213D00B98F863393044E2B30F200CCB88481A65
A36504F5A0312E33DD66A9AC23891418DF013A02BB3F591DA36F1580BF6F5328
5F8BB400CA69627D1C7C3B2FCB09F32D9D4CD51464BC4CEF070C6F9F85908BBD
19E7A52FDE3106862F54A3D19F8AB3DF6F6E9F21322187D399A37A59F0FADCFC
F4ABF8F5B5FCD8F4357D40581A87CD412FAD7DCE7F9C4397ACF482F03870CBCE
88FF9FFC1A1B85E293E88B40EEDDC4284E82E01CF03646A10B05A06E44F63ADC
A9292AF77821DF3100C351D7FBA88EAF932E9C103244B5FA08E33E16D59F60B0
6DA5BC8C0460F6640CA75F75538AF515AC7850E56650DEAC23E3FAD1E54751C2
C407087D4E230D0CF4B7C375321CE4046D2D2AE438922EEB18E476962C414BC1
4376E570AE44E82C0B485C67856C20877FFCC33DD32D744B5372DADF82CC5C3C
4E79997C6B4F39CFFAED8F89767603E3F75D98991AB7A5529C542BC4F111C6A7
29F73DBC83690714FA7104B0EF4E423362F9782AEA241AF6C72BB2B8AE524B66
F37533679B338DE4226751759F01482154025B1F47E53E0B12DFC12A10E2C516
638EC9951DB1EAFCFE9785ADBA770B48BA3BF7FE1D9EFBDC478D60558CAF565C
6AFFDC0589F071B820F93720F7929CC39EE83FAD088832958A27D63C9904DB86
766B4AA3CB72F47FA77E34BF8604228FCAC9406486BD6ADEAF6F436DB6530FB7
0FD06A284EBAFA0A87FE71586C68810F332A7FC8854EC912A4A0B9D9C01C8782
D237C2C0FF9146ED97099BD9AC63BEAA36B49587DA1D5E30212338485A964377
E62A91A32F48A6D15AC564AB1DED690F2EDB937DC6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: HFBRSY8
%!PS-AdobeFont-1.0: HFBRSY8 0.6
%%Title: HFBRSY8
%%CreationDate: Fri Nov 22 09:22:11 2002
%%Creator: Harald Harders
%%DocumentSuppliedResources: font HFBRSY8
% Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/HFBRSY8 known{/HFBRSY8 findfont dup/UniqueID known{dup
/UniqueID get 4214391 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /HFBRSY8 def
/FontBBox [-31 -928 1186 779 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (0.6) readonly def
/Notice (Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de) readonly def
/FullName (Computer Modern Bright Math Symbols) readonly def
/FamilyName (Computer Modern Bright) readonly def
/Weight (Regular) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AC06351EB3A0C389A576B6DBA855944AFB10A763BCD8BF
8B79AD7E65614FF892EC189B59B876216E4F7CE542AE8E603F206E9A5F86B4DA
C92D7FC2B1E26D60973F9BC47377A309BE534196C422D12E3C8FFF9A1AB526B1
516B40A8A3B311E7E1E3EC357E937C529EE32FA380B3B64D0B9DE03CAF922AAE
FFD26D141F2CED18E6B31DA311C35417AB8B02A7B772DFB475502EA28EF51A72
5D7495BBB7E68C8DCF7D18354164C9D2042F50AE635D7680F6F2BBBC9EB14C99
7FEF6E282A78971F20956E590D16831446625F2C003E4F5231D429FD9C0CF731
4C0E72E90875975068530716D94DB4DFE6788C36D2D8DCAE9293508268DE6743
47629B4F73F65F1B952A3E41E6279E762A30ED9F11F1B7969755511DFB97537E
9AC1DD35F28EE1C8926970A09B4D2CD2CFBF4367E26F12E02740FD20E6FF610C
BE58523F93CB4443C83FD9683F87248884BB96506EAD1FF259DB4C2421C009B0
51E6E3BC0F51E8CC7EF3A5B67D0C3F8044E8DBCC8F779E3DA3243D7844562348
9D943099F01BAD7D74BBDC870157B1C0305ABEDB8E8C5D99156A933D9123C948
57E62C1277F7C6B28F6CDCCFE3A18B70DA757402392989570A2B2CDF0245A987
F5B2D4A91984C0733D9FE036BD0C056599834C70A79CCC9E745EE3B03BB98055
9F417E8213AB0B3F350DC3364996467CE5D05FCFF8D91C723C5D62211A36FF08
3EE62C2F0D947155B9C401494CA55F128AE991F61B649CEFEF63978D259CBBD5
2ACD0CF313E75FF446E7D626B67375D47046691E0C45104A9AD1B488393CDC8A
28F6899BA7E8A9A88E809735E9C9F21A0D64ED2C51B8817212550F603BDC996A
38A4A35C7763D3825106DBE88643F072583B0309744704995DA7797CB545A045
0CF67885A008A51EB978930165E3F573B9AAA9CE3108BBBA5E71CC7FF4A8DD40
57DA21C69499D339C2E2F9E767463C561FEE90668DFA46EFC5D7E6ED7A070ABE
F7EBE0F8C7F875053D1498AA8E66F86D3631D29948915A2421736AE66FDE755C
23EA30E6D9A5D871DF47609EEE91910A9D3DE1711E60F4D3512A123C797E4571
60655A46085CC4DE87107FB8488C4E61D98EFD958B0298B51CB9DDA15EC69EB8
0ECCEBB65867B42F12CEE39A7D8E643D7EB21E741C5957808A84C71287E1936C
677EB18EE9B011D9C1A92D6127D43EFB92E932925057EB2A2218076D34493166
66E32A63FA9CF4DDBD940D43359A400EB4E712C9C9C16B3000FF061A67633697
2FD9D08363BB04C97DE00E72AE95D32B1B9BC8D4DF61591C8627AB9066A5A727
331F77E346CB74E6051CB4FAA1D829DDD35D2BA293772D24F00EE40E36BDCB68
D9AA12E5674550F711115888B8B05104079DB4557BF395882A65D7D7F89B51AA
7AD3AC90C24E9969E4E4A7F95E3666C5F4A51C6320A7560C76117AECE5C051E1
A4B7D87E0C7956D77C9BC5FE14661649D290DF48117A042F9E77E5F31FFE4036
3CA52FC2D589C2E84D8CCEA6E25C1CD7B45A3D2886DCCB45ADEE08FB170F8B8C
8748EEADD305201B6145DFE32C8602B10C703F85E92A5BD0156DCB36CC406C03
C94C88049D9CC90D9DEE76DFA43BBD2A711A1C2A87099FB1D1F77D212C4B7F69
B8DCCDEC2D8B2B3129ACA91194EB8C065B8AB634C1FC7F7DFFBDABDC32704B23
9AB9143EDD3A40FEB564001DAB0024D771495D6463AFFCD043D024B02BF59C64
BAE8AF477AC0814F9092C464680882DE45649F3A6455A33F5B41562076EA1932
DC252407E23DED6E27FA79786CA398C2FCCC9A4258C8EDB8A7E3FDB26C063805
B7247EDE81689E9D6DB12D68AE0F8C6CAFD80E4D4BD0E27C3A6E515BDDB6F612
6DE00E578745A6232B5ABC4C55CBF946C6DADBD83B091767AB51DA4BAB402C70
D2D4EFA26F22AAEA93C3B53DFB85D25944AB25D46F26C51025BEBC6CDE16F8FB
A2F1BC5DE764A4343D932641377FA08ACECB876531141A170BEB176FE61A3DDE
0D63E174D6E26159AB5EBF7F47EE24C6C23ECA00F417A122BC1E74BED7446026
A92902FD0DB9EF124C6A32C0E766399B240163355AAA299A74A87558CA6899D2
F1F9E8F0BBF76F740710F4D305B2B5B53C441662CDD6EB6227809DF6F67CE987
4C71BFC6AC410B3DA9C821396D64B626661C9888CFBCC8E882A61903A283BFB7
4ADAE79E382E5DE8D2A160C85429A8AA6FE22478BB14985B413BBCC923CB2218
51F61C44C9C8DD56E9A1ED43925206F26F255EC631D11E2E80FD4F3C917A1795
54FBEF87FAF4840703E60F9FCEB79EBB6849F9751CB46ADF4E251EF804D421C2
CE96486E8648932F8A2D284F0E0975ED84AE59C639FBF2A41C24B94314201181
B9824E6EA044D25886C7F160FD8F8777E0AC4E0B52EBDA9A3C0D1F70C42DC20B
AB5CE939F61A490F22A6064A5599CEF68283F98935281F082D661C56D9CF249A
92C0715580286C2BAF994D11A143319AF38285C2C39502CBBE178F95776B842A
4DD59122896A83CA5AA73CE009CFBEF016483EA3D1BF3F80D15DB709A8F1E24D
03F087F46B5FCAF70A2B5D81FCA7259ABB82028BC961FF00AA0516CBE04361E4
F3E49498A19560B9521C9F50A6743D0AC54970088B9ADA7612267FFD07847370
8C894C8C646E1F9DD7CAD9CD2E708162F48B00128E82FBA3EFC582845C7AF89B
24AD38789595478EADA52DC8F6CC45B8AF1D449ACACD8ED20F0B3CAD2C6E566C
0DCBC6AAFD10F072CB10E6819EE64288ECBBC027C80E87287F38949E3C483D6B
94B900BF40867E507E7BDD03BD91476EE418808C9001C88E35BD0F7B7F9A16CA
90911E9EBAEF5D712472AF592E5817F75D88129BB95E2D46E045EED75605B4B9
61C087BDE5587E2BB87BDA10A99D7C033BA1FA57368ACA61772E489FA83C17CB
AA9003CA6F81D7DEF487597B6B2B373ABFD3A0623CF1E03EA5C8F91B00570D09
224C2AFD3052588059584C627F9DCDECA30A25A00D7514735C81B5A4DA37D869
420FD84951725E5FE0BCB26487AB28FB3A72CA15F73B66ACAA8666BE5CFD10EE
F1A3F69E57804285BB3A6A9544F0B18F6A9987317B37577A93F3CAE8AD0C0342
0F26B44495CB546DF79C21F2E47E83C539C3865C0F4E2F00D9E7AF089F1E2B0E
7B6FF609F86050C6BC22AE7613B9C5192AB6C38CAB78CF337A3BC43797007D89
500FDDC4EE4C871D6384613C1FF870C0E5E3282B88E079FA782EE592D4669CA4
4C9602E682E4727B279788E81F63314209BAECD5C9471DE4ACF96407A50B2E83
B8C5C1C8D8C05D3FACB2509D29EB296A98B5DDB656BEA8D71BC896436F685A59
A72B23C7E2702AD2EDE6DCDE477DB3E861E083273F4F1F401D7BB175DDDCAED8
39AE799E5A389B76A39090747B4826FF2C6526433362A5A710EB0E14AD97CA12
83DFD1AFF87AA6FF3AD6A790A1695117979B44EC5298CE93F24C78377F8AA845
8F2D7315571913E6C5E80DBFF15CDEA786D4AE0CDD6E4CAD04E9164350252AEF
4D04F8F7EFE42A943F12FA0F78F6FCEAAAA93D9E714C9AED12A78755EC62F920
205F4D8CCA1B69949DCFFED15C79E06F256A31A983CB7F218A105919E5040E72
71489FCA9196BA37A49DCA7D9E93DA5A4AF10EC3A7A4DAB27DD95F0195E13A13
54D3736F687B9020EBE08074B71E877D539950E7F6CC46568FECB9CCA4E59B5E
ECE09D096B65D2E7CE80EDBCCD1B441296FC805031C07B1196FDC6F3C1B74289
CD8DBE2698485634C776CA7A914008B09A6C3A5A191FEA7E75CA79153F3030D4
D67273E51A2B0A74BD9B2345BDD5299B794098A248B94B0642DCC3D403FF1F7A
A9F2604CD0572B29C04CAA52F05483BF9E983704B65E231705C7628D5D31F833
26DDA3575E5DED53151A1B9BA507AB8F195870D7B74D2A10A18725C8C76D0C3A
C8532A1BB279B60A917148F3590F95268CFA5CC7407E85F0E10B185BA83285E7
9E59E7C5C474C0E5B7CC9AC858780C6145CFD5AF68E19FAFABC4F057E7101EB4
A367EA5FC1FC506109F584D117DA964F7B907D0EE90A5512589D37CB28A2BC32
D0986713583E4AA640B80DE3F7FA2DADA952C0A81460803970A1590356956BF6
3D6DFDF18F68F848409FF11515E72D37CA1532D4ED801BE3FAA1CEFA7784BFB2
4CC47CCF4F703AC65E7CA73CD93DC74FCAEED878C7EE09E5D6A49ACA975F4B11
76C1E270E44AD30DA04744554D83893B46329117E702A40657C295920259220F
C45D2ED8A86C8935AF15AA399D91440AA0A6F67C599B7CF54F42689D6DB715CB
966D84535B79207C04736902D4D4CB1AA37C532985C67B8A727F9F85FB9961DB
D88B9E1736649187F955B8C6EF5E2A0D827F2E449560143DF274BDCFBFC38AF7
680D97344F71632E9BC09EC466DCB2A94601BE3C55F85557A3D008A71DF9AE4C
5901751FD84F8219B6E69CDFDDB0B6D9641D26EE8594BA559D801BD3D56A207E
960F8DC156EF260DCFAA516E07597F6170F655A21C7F694DCCB37E1869F4A9CF
15E8C2DDA1C0CE86B2CF4F2B64FEF7F78246F5D3D81C0CA5A1223620C3276A86
294EFE36474E1645881C412CE915757609433876A9A4D339826204E97BF203AF
4446541B36D6F1755443EEABD77CCDE56112059BE227635E84CD0C5DF24195AF
A4BA7AA48C80D49D2415D710C37AA652D1E1D974B7CE2805157997A29DDB936F
A81E80DA49C82EAA7A03338773726903A078F7361237C2D7E424C3D0C74F894E
0122EFB5209E7BA33087DEB3970DBA839FC3C6C0BD84AB5BBB9EEC1357DD1E65
636F6DFF901EE0EBE61A7A61A8E5D4B74CD9A3F59298D89DBF49EC79051F8405
FD514E8DD363A808D23CDFA721EEA2390FAAA6BF262CEFFFE247665015E93465
34163D959EE5B70F5B32DCC7D45F824DF454FF6AF21E48401ED2D8027ACFFDE3
3DDDCE1C603E319C534A4B9E23AB5EA38CEBDCC95AE454DC0198DDC6E1489429
1A4198147CD3B265A7DAAA2B78A087A1CAE0241EE6C067AC2E4C3FC3E30C4C6C
115A29B3B0A5C5AD52B235FBA9C2E136E92CDB33F5B6BB3C4F4514FDDFCBD101
A447E95E92AB2CC92D13AE749D96A96818B94A4BC4102729F72FB8F1762A0144
CB2B586A980D3F9E4D7EBB71AA709C0A5834948AE58EAE2F3F10819A5CE0AC98
0E52639919589CF34F3480209B0DA47703A476FBEDBBFC543709F2D5B1E2780D
BFA579915E6637CE7E0D02420699E02D80797212DB449209635516ACF40BD0D8
BA38E2D2A26ACFF4082B52998B2EA53A2A40696AE22DB8F9BBB96D136BFE6C17
750DC4C2AB9CFC094E0C6842A82B850A2B299925993A8B3552400B38FF8D039D
DD24F322C24F97CFA1DCA9F809003E31915CF01822BCD3C4732D5552005048F8
FA0838104A7E3ACAAE1609E2668BBD9B6E51678F9AE0D1509ABFB90C89C78062
8EEC5C556E9C4B78604F64D7163FA154C4A18CF4932FA2378148E6CC1801C599
52E0A61B19800265ED6BD2F80C50F8CCD77E497421B8A93C76D5FCC665C91EC9
C208C1ED47765ED268ABA95E028ABC367A52DE075553DEE6A78D1D565D3A791D
8613A9699FB08D2F90D233E90A309BD803DAA5CB71F8756ABF25F59EF084320C
2874410DA2D73B4F7D73BB06E4D1BEF02358715F74A540D2DE778EF69333C3A3
3B0166BA72986DFE44FCDD94623B9BE3B8AC2F195008AC37356E2F8488563321
9107C75C3CC35574626B04DC86A1340D6D2EE5D462BB759ABF31C756D3CADA18
233A7C61D32B5F3716CBC6D87521E4A4E110D58AA70B022FD099DF807B60898E
C78D689878FC313F445CA98B414D41AB5E7CA41387D851187DA92117E3EDAEEB
6CBB78ED44EB3F3BD62DA7DB89B20DF20C93E05A01B4D901D0339577092A5B54
7F0CE9AD3710DAAA5DF077D5D3E55E242CE10A9CADE496B371C4004463EC54E7
0DD27C278D4579EF9C4DDA735FB2A6CBD7596AB32F2B333A5AE9E6BBD95FD311
C1BBF929F774AE9C3EF4380FC48F70F23B66598BA42391C1473EFFB48B9D1141
20EE3C43AB2BFF1C3CA588861F33531FA84EA62D39868E837B477C415B1775F2
898DED2516B6560B5983B9BD9D7E842141D8B061E5EFABBF6A19406F29DFA8D6
BDC2737721E5D5D4E76ADE5856B4511D28262E60D5DA90C59C6188BCC6535AAF
E74E1F31C32C230EBF0BEA0013491558CB90A6885E9DFB31E35D47547726EB9B
35354F006ED049EC63CC2F9FEB2D397B768E0BAF242926CE225A45152331865F
0A06D8BAC42C0782EF1E222C70B05A634241DA81B0F4E16FE710CAE0E850972D
FB9307DEF289D2140B82172F8A565CC6636D9037EDF1A2B5216478F705AF45C0
63228CCA35E834397429BE11257754CB92AD82130536E539883094CBFDE790F2
93775CA1408C29C313503867177F271A648F03EF801698A7E2ADE9CD517D4F69
012A7E6EB03DBC15446CEC2554B88FA234C303B80FC1F91E3BE76475B056C40A
721873C318AD5D9B2B2B3309340354D2B3A008B97735E1B068DDD6724B20E13D
E6BD8568249CFCF2DEC3EFF192326CA202422B76DFD82EBE48E2B4CA2A3A6E39
6C6430162B00A165863B3B84795A6AE69E24476D2A0CFCD43912590F04C4FB7E
3F88F8A542652F8C6C74A96C5F14160A2F2016CCB01F4091B28C3B1A0C911F1E
B030F069E8F09E79D0B0ED51680B7C2E13D7E9F4B4D9B51CD509DE887D79AE2E
0749D076983AD1FF1112EC4FDD1EA4740BBF9C8F66F5DD33A272366CEEB73F4A
C3D3426D2FDDD368FFEF72F645493F6ED856AB669BB9D784951636AF186B107D
6D8C06787050B02B65877F3581C1CE516E5B3873613C18582CA31749C10ACF6D
DDD4D409754BBCF78C51E8CB1AC23B8061066691C1E1CD094725E946BD871ED8
B147DD0D6F1DC95D9ACAECAD1CCA315D620E9E91F70C6027344912C9185C27E2
7400C65036D8C678E999CEC76C2E57D4D4D932344CB17E8C203216CA4595799E
7862D34A24ED0C96405F37E6FFCA73D67F1F199EFC55B9F3559DDAB57F011F88
834C03E528052035B552BAA4306388614EBEB304EFA49451F419CF688697AA20
3CFA2516F1DE134550DB47B7F19C82286DC77155EE1D0EF27078972E4B136350
25EA6E349D61FEC72788230345BA778F9CE27105F740349675832BED0E3146B1
C5181C9CBCE926CBD48128D74324B6A98FD0A8B860050EE714A70F58824BE058
749BFADF57274A42C43F14479D649E0B0C6FABB5150B15A87005F6C1245E7F6A
93B962CE87F87AD258A196ED3C0736D2FFB401BF5136EA14DFF6A9A943DEE78D
337BB04745779BB96320A85FD77136CB76D9F21DDF9D68A8DE3D8F7E93698EAE
4A2481EA71B1637B6DE8C8067186A57C83886DA87761BE600DEECD13448A82BD
652BE7ABFE6A03F525531E00A5C5ED25978A39BB85B12B267B399E06BFEE7DBD
A177B6E4BDB95EA706C4D89AD2810ECC6F08BF0AC19AB67AE4DEA067A542ED30
7D905E2486925D5C3EAB8B7DCA673E4DD6AA98DF7C57A8FC41B33A69BC005422
F2EE65F677B9D49346F3508506FCD91D499DDD98B7CD96E7C26CF461A54450B7
0D6EB16764460006CB6597918824A917C6266712C5AC38A051BD7CC79D3A8D51
43A6BA98755417A2C4BE7DC38995C2462BC9B1F1698BEFAC9DA110A97E3D2905
4BA0E6B528F42130D494FC4EF75EA4F294EA04C34542AE22AA967D32C3F37A97
436BF2A8AA9679EC110E7910D38FC86AF5A8410A54FC2AC7B1CB1D115BA2C90D
27B2637AE08F14E3614CC68625FE9A5DBF74CEDC0D5D355FBEC9EF650BC390AD
AD4BA3410C3442211B233A101DB2851C2545963886DEDAACC6C2B998A11229AB
710B279E6E68938D9D6FCB10846B7A78F39EE179DDFFD24B67780F0311ACD75E
7525E7F817791E25F5D42D77350013616B92B7645170A6A6B6C1A85D00589261
58D16D426B269537BD1E24DF0D018CF19B1E9775434DB9AE2ACFFB374247724A
3901FD546D465B4A494FA0FE7042B80B0E772F332A863DD328D3DD0C225E2068
36EE7A131C5F333881C1279247352449FF4376F4377B4C3C632ECD4C850C57EE
FF10EF406FBFC6D55EF645F39F52077A8589EF54E9940E8D4CAD60210937FCA7
120F8F3A8E42134F1B6B0C248D56F247AA6B0E4943F2FFF8F1BD3BD8F42BB2FC
3662D7BDB1472510E65303242E2818BF94F3B4B604807215323DC5C06692FA7B
8AA3866FB247E9FB01500448E74475596745B39F9188EC6821B09BD066FF5C0D
2087231C485A1E005C2E1B7E7E577631C7BFED397F59BEB40AF348E72505E3ED
7565083022A07F2DABDD90859F3DE0E5FDB280BE8D374A8D48A10B2713DFD32D
EABA293EEF5A814B292E99A4B6AD93AA4E6FD216C7B7A8109CEBE9B0EF200E16
BA13E4A36F92147E38CD271718777934917936E82A4C35E1F29AB9CA53E24BA0
2ADB714782F0A0444016A191133F19542995636B1F993002C70143E098CA6584
1533DE0242731B79A1A82CFCE9E54C35CAC050E3F02A9636E89EF795734A4394
4A7226DEB002671EDDD247A356EF1F09DEEB5B7798D02A7EABA4B904A4031C51
9E155A116C14F576AEF66E86BEADFBCDF61347F594AE5FEF6C3773F335A7CC09
2ADB48BBE40E0EF6EFD917EE28E980A062580B9FA11ECD24F3924DADB7DEA139
D539F1465D50C5D1DF71C76E7E79494A189878F20FF7D0A11571F69B4EC965F2
0D7B4882E19392B15602C09DB839E1DEFF4DB50714E8B78BB76D0478ECBFB339
E9CC1B850592BC817E7048945852F816E6F8A47E0D235514D21087D22EC91EC6
28DF1A494A3F81C9D5B5AE42F44FB0118252A235479B7B114110F3599D8E6CB9
E93D141668D361EB443D5CC5C32D33E5E2C360DA0D8D5B75EAE6D897DE530DA8
9311EF2EEA8377A8D95CB9E89F1AD5E2F16E5AA99005E4F1D135CF352B21ABE5
447063ECA7D544B03F9D7B7669154DF271A91E400957B7C149EBB3828DC57E72
E74F0A927D279600E1942E9C92F9B480B4B44AC83CE998EC16596CD666D3D6A3
2258773A3C0009C7FA5D3552B16A6A51DC8F0BED5B040474E7C79A984969412B
72C3B483C03078376806B281E0759C0DE71055C6D50E22EB7307A92C0B845BA1
1D0D54B9288523761AEB1E6D79A424AEE1936648F834CEFA743E45CFF5B4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: HFBRMI10
%!PS-AdobeFont-1.0: HFBRMI10 0.6
%%Title: HFBRMI10
%%CreationDate: Fri Nov 22 09:20:38 2002
%%Creator: Harald Harders
%%DocumentSuppliedResources: font HFBRMI10
% Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/HFBRMI10 known{/HFBRMI10 findfont dup/UniqueID known{dup
/UniqueID get 4214389 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /HFBRMI10 def
/FontBBox [-108 -222 995 750 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (0.6) readonly def
/Notice (Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de) readonly def
/FullName (Computer Modern Bright Math Slanted) readonly def
/FamilyName (Computer Modern Bright) readonly def
/Weight (Regular) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 15 /epsilon1 put
dup 17 /eta put
dup 21 /lambda put
dup 58 /period put
dup 61 /slash put
dup 73 /I put
dup 76 /L put
dup 82 /R put
dup 83 /S put
dup 86 /V put
dup 101 /e put
dup 110 /n put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AC06351EB3A0C388F7EDE3D9D355D9933DBEDDB5162DB2
E065C95E6C199FBBABDB5E3C86498B8A2FE34B3617A9C822EE3C206791F723D3
0FA03647B20FBD0D378A55534399BC4BEC29FA576B802D7DC4B3B4E912F30B6D
0C18498C6551CF3E11303E1A6F632D10DA65C085A8FF051316C073571B4CE69D
D554863AC47907AC2BE34DE4203C8A78CBA2A739507E02D313E9A7F89EAE910F
204C63CCA017B73E158669002913003EABB317FB508B2D85A316BE8C707249B5
FDD5B61C1906445E2B04C6896A8E764A825A75424F14E0CD2BA99AC4746E8E0D
F4C4C682F7A0900A2218135DE5E58CA35D1ACB83255F683AAAEF8092CB082A8C
B0D779673F065D7408FDA0804E12BA4729806B39E930A9FF2280D603F9F2EF10
67461193BF703BB5383FFD536F67E20F0A88A204DC683CBE272E7E8489AC8866
30624DC40BE31A47B8AB64840014D5A9F629CABF603B62268885D2161433636E
DE38867D622F58F1DB8CD8B51B88E15F16C6BDF163E66F35C63BCA841D5B489B
6BA7886DE7EC684773BDA0F1AD024A3C82EF259B6D15D71AF7ED9597EC5F4DD5
84489A8B5158381E30DC8ABD5BE39B59C1A5ED488297CA2191BC3437F31CA754
B0DB2112129FFD863EDC2160A80F7D4D943929AB612350F7BF8AE375F111ED7A
9833EC6280F58FC4EA0FEEF49F3B4C15BE9C4712AE4DD13736DFCD0F682D7D32
4F135865A9D0ECD664C6B6B2941B7B85C79DBC210002F76CF6F57AB7D695F17E
1EEB970BCFD0FC394C016EE3E1241018F7ECFEF9F9133E7D3F813F9D8EF25173
41CD5027B799617212EBFA51F6D1291B357B9EE787941BA6D88502E7F25015E5
59877D7052E6F04C062050C9350C78BE68FC3310AB866F6BAD780CBAE845CE86
E0DEC7C0346062DDDE4CF5FC2E46BF916DB10AD9D856447F138F35B9E765834F
FEE3B4A273720A6DEFC528C6BCE8453833E2C176ECF1F0BF1B766B98D882FDC9
79CFAEFDF8D608E2327A19ACC0A9034B600411DB1C1CECFBB3D358C99B87F2C1
66F222CEF2E056AA29A1495379A0716AEF2EDD9C94940C02D20A43E1C7278B67
1681ECE3F220A7CCD7A61F7D638275E0A1C9709BDA8EFC357C6B67EAAACFD6F6
FC503307CF61B15C126262A5CD3EEC6A4B47B8E870B048FB96EAA43DEB2447E4
C2DC9A1E87DA5FF96B15296257FD791D642DFC937F6CEEE01B3B64A3F732908D
553C494E1ACA34EED4E2A18B8DEADE26549988D98A071007FD60A8CEA754DD5D
1CF9D19F956B192C593225B5186109D3E6636E87BA6F24EFEACD1F06A29DB1D1
F4DE4C0AA6781D61C4B98BB30F3047600AE9A238DAF7B6693BBD4CF6D8B6DC1C
56D854BD6FC9ABC29DE904710FB57AE2D3D37E6DE597DF96964042653B056895
0B5D02186B019BF08B8970AFFE725EA77032B9E9125E89A42E94B34B777BD66C
EE3314D4E720A073D85A7744F611F58EF39B08CB435164B147B5D8C76C232F38
AD98588905BA2ED95D450CF65DCEFB3614AC09EB2F118DB4528BE35F52CE59DD
F9FDE381057DEE71419F92E03B83E56C014B6B9A911513AF43380B81D1135B98
BFB97EBF9402FA6967D7DE9369B0692374CADA1F7A810A9D9C5D338D30ABC2B0
16D41B129C722678C54F83C0A679E3FC4B635A1272241BB1A2AECD349D90E7EA
35BC2FE21DF1C2285DA617FBC8988C00C413FADA83672E2D025FD98D3EA9EF3D
3607B7F8BCE6E3C90D7F05398B66ED0AB9CB898D41A707D5F093C49115196746
DA3FBD606898041893DC989777B20975C01E14524F1D17D4AB7DC47CC7DAF3F8
4240C9C118F13C8629046599894F3A4F4029A42A924EB7311588CB06AC8B4D15
2AE6C98EE7D3217350EC9C221291BB4A3DC7AFF5534F2BDA9F17CAEB0F2E2DE9
397CAE4D099A2A45A265C1878E3B66D1D8F2AFD2F43433E23379654245D3D447
E4CA328F1BA7B183C2B8080C54041471BD50D87AE182F1A23C752BB1D241D5DE
D04964B2B851ADE41385F136141D968262CF4DFECA20C869C409E18196B50473
579AD4E6314016337C70AF58A0406DC912689D867F3E7F11985B3FC6C7008725
17A0DB18FD08173F57C9D09B2D3E46C963A95E4C6B0A4D4C5F3122593EA3DE1C
D2AE6693C7D4554882B6C7FA5C910E3C1DD5378EEA45326D211E0E0361149A4A
0CD64CBEDBD6E92D0FC5605CE5498C607810694E0F8C52760E7159ECC1D2AE32
91689119A4B330B2EE9E525101BDD58972A870459125103D25369DA36E884C44
BE8B4BA1C8A1C94F1E6AFCC4A89445F753F25A0CE8FA4FECAB9A050E0DB4DE2C
F5635327E3D19FC89FF70D5163FDEE0D44DEB5B2A3944AC976F7065741B38B3C
39C3979DEB1FA2835657F43F2C256663D87ACEB3501304B9FD91741B6C5682BB
0E8744E070F0A2EA93800D21DA8926CEE57E277EEA7EAD22F0391B94DAFF627E
7E5EC9FC3BB9FCF3ABFDE912A79ED5996C6DEC012B89C2FDF1B829956786C167
FDDDAC20FC72BC0D18E91599BF746CB88ADDAECC286BB17FA8737438370F000D
DF70A6ED38B43A12E510B8D6A1DB5F1CBBD4CAC8B79FC51FAD48B0E2F94DBA82
03E8F573CB5874C9E0ABEE3FE2EF8B051A00491CF8ACA729587DEE21D91292C7
8DCFCC858892DC1A92EACA0B64355D0B52625574FD65E81ABEB5EFDC731B1441
82526AB15C78C3F7FDBCAE79784E438A2B3182547AF16B1B07A6990A66535999
74D954A0C45D957A8C8FF88C6299440E4A8B0BEDFD9DA780738429C0437EAEC5
1106DE8F93B584C085C1FA2AD48F97EC082FF299B22B6C39C194971A13137903
AB3BD96FA3B67708220F561303A446D252B1B25CBC135F011CE1A10F7553F10F
FCDD9936396ACF9B0595340612476C5C437ABF14EAE55C0AF4FE8C2B95131D9F
8434DEA9DA007F0FEA496B1D9C7C52CA038433238110D7A78597090FEBB1B706
A8B53FA6BBB25C0F8CE8E8EDCE6D6CE4E56581A61B190FC65B46A9C7E729B9F0
39C1B8C0EF37E3FD4C096B36D7C1471D5651DAAFB709B49B125795EC05DF5398
3F2610C7A35BA9F21078DCE2C2AAD3A25FDB8836ED743E515A1C6C1541CCD60D
FC3DB292245623C531EB82E03F269ED8720C2614CA1EF5DDCB9A9298F809B940
01C4167D69DA919251752F898E6D493888764FB7DAD6B7DD35FE64AA4DF29773
7FA1B280AEF0D1EE9186410E7F427A4936611D71AE0D7397F3EB892BBC3D246C
4E94154B2016425B1A7A3C34FC55B53B5E705B5A5D12548C23BB017E5B3F40D4
C99E1F4FF6D4AAB704BA1E10F810E91E97E8562A4F35C666090A9E59E2FB9127
E1ED2C6593E2B865236ECE1524E8FB1BB4AF3DBA68CABD13DD69ECD0AF6DA92F
239FFA866E63D1878FD8F057AA0ADB9341AE7F1107DE06FD285828A999D95B80
AC01A5CEB1671DEF707D4486DFB2402F62706AD99CD72285CC8F5E95D0F34196
9192AE8B48F25DBC6531655A7045D6D7D355279D9319CC3BADE5557F9D37DFA0
456193E06078CBB61C022B312CA2B3D74DB563458CC6412EF9C5B8C4D285D0BF
02A2A898D38AF64FE37782D7F0E7CC94AD9E9F3434B4F69494ECE226BCA88380
9BC480C901FCD7089041F5C5DEDB8E188529F6DC7A9C923E752BA94909AAFD76
077C0401388FDEF9CF9B0B34BDB181D82A94DF97C194D2302CC47BF968CB1F6D
476765DD1CD2FBB994EC139664E9E278EC58A25FD4BCE68C8D1BA58F1255C59A
D6D59CDA594FCB68C8C5127C4618F4BEC2FAB5114636766D888A80D205E78F88
2D02F2CBA17EDE995CDE74E48EA55C839864A5D45B465CA331D95586930CA2E2
71A5C12DA076503B8198F337A5761A4ED280F37840128111881B35C2C7D6509B
2B749F1409EEB6DA20C70A57129401EC59C99CD51EF50448E8F5D34353C29A0A
37B7E891FCA023EF18CDB84BB5603015772B4C2F1C40944D74403778839F2E5B
EAC028CBBAF92100102140AAA9E97913839EB63B2AE86D9E39F7A45CDCE00565
27C177015E0BEC10FFD659CFC1E95FD36CDE39709B2DD2DAD37A00E505809A5C
E9D124C7604DBBDA4AD77AF37A4C38026C0ADD6F38C9BD6989E8A8C313A7DE26
FC525AB4B1E597299235D3A7EE768F2B480A1C5EC1FDD19830EA5382670CC166
BA0EA444025898A5091070E9358A4B5BEB88E23A18EB30BDE3AD1979667B77C3
36C55C42B7B4599137559B2089AA01090C393808B08ACC4C48442B68B5666B68
53ADDE30FCB28A904ECD3E183C3D1F25DE193F09ABFB21B2744C63EFC978ECA8
C4E3BE979D2B2633EF65B815F9ED5EC1981A4C83D013EAA8FC5A649003996D3B
EEFF79954671C6F4524293FC420941DC87E95DD4E370F678F8A7492C70E418F8
2F032745494F1D61F8C0BECBA74CC30193929D4F5141B0D6655A0CE9AD64BA34
09E0AD2E0E10FE45639852F9148A7632F3512EFA7C022C4500495C315D0C7085
A4D489C273001B8DDD2A7A5FD54E47497D59CB91F42FA2832ED3DD9554A76CF7
7068C00D32B65CDD3476133D5AF921FF8724EDB8A2113B791E8A5FEFC242EE48
E1EBB351805B536D044643FBB44F5F9BC8E44CDCB94CDA6E10C8FF496E530785
F71D6618A92F0F4156B7490CA9B2B1B4ED7B0D7BDD3B01A1A493EEAE2D2F5AAD
4F4111C92C199DAD250A7B9E25F5DE5F6C986723E6ED3315ACAF6AF5EAB716F6
08451041990AC546BA6A36930C42194F164B774A6521BD2DF06573EC663C3F30
1D0203E2BD6F5B0DE0851DBE74C69D1667F7AA5E5B3707A18C02CFF7CD88A835
4A4BE15F6364D8B2A55041F1888F708B929A6DE941204F37FE95113977FA4969
EBF973D37BE353D2380BC84922AF1C4DA52CE712AAAA0FC38A42C5CF36FDD694
E1830E19A8E116B7CF56F4EA5F26C2FE08AE7004FBCFDA5650E2A6F2FB2A3F96
E7CEFD7AE1D4169A37DE6119806E10DBCAC6D67D32AEB662FB827FDDB367ACB0
0F9951D2A42DCDF006A4C02B8D2B0D7939D5C3DABA9A28A23AE450A6CC9C39CA
7A47CA1DB46C2FA1AD5E04A9FA63A1713E7B6A8F79AC724A8AC63FD98FD52449
E2718AB593CF82A5DECCA30BAA3A4B5CE0152B8A9D68B1FD64665D7F1161123D
E639BEDD3F356D3159F9823A40AE9BB4E16C57C03CB82B3F896BBCA05C040D06
3E4E40F91E0192D780EF5C386B01F076EFA584965A31A99F20E998242CCAD5B1
D3773D4BDCDD188031E7D00A98112CEB468C8893D26E60BBF8002A43E920D44D
A0A2EF9C3D933EE163A5C433E1C6BA9073C40EEB9A16EBF1C8FEA010D587F80C
EACCD2A4DADE67C76B8B5547742E0A06B1E47E450402EEE3DF8D4B01E216DAD3
FE9D126826EC2DEB87B64A001DB9CE0065B4440F46558857CEF5470999F6B3A6
17F59110A2C02B374671CAAB374E9413E32156139B39C3D54E613D1725EDCD43
7FD264FC982CEF3D8AEC90AF13B5F35B812EEF80029824654F1AA2450D3BC1DB
E5D9D9AA5A228429EEBB58E6B2785DCEF1DFD5D7DD74FFF4814CD9B28BE77095
221702FB8114D22F0AA98FA76B4F9B0BB11244BA5CE2D533891FE20A39605C92
08676150DB464E00C96EAE5A39DF879D8EC86DD5CBC285E67B5040D771B36F12
5582F0EFA67887D10647FBC95C888433F9846AB8D0AE9805FF7654ABAB07748A
2A39C010F5511D13C209B6CC8C59791338B058F3DBCEF3116F6F1FFECAEAAC7C
D0D42619E95BCB97A856358D4FDCE0CE3964A38D6DB1988E695793367F06AF21
D1BE34825BF379A627DF70CADDCA5914FC9B7B8DCBA796C306F32E1BBDD57DE6
CCBC235568B5339DF2BC4A17C1CA0B3D1D5EF88855413E7EC0893CFB58E29B85
F3979C805A26143BB8CA5A9C07D622029ECC2034074343ED2E8030D46D6A81CB
7DA4D13F28967543B28B7EE87294D2AB38CD616D269504032E924B75E90F9E6C
1700B0D29AB5A8E195115CD7BE0E67687980FE92A22D4E88ACD552DAF91CA00B
750A737C63E1FDF6BA283E7DA62045A3F3EB95B89194ECB9A42F219B263C595C
25A5ACDAA6ABA08244BE7886D6013E71C89DBCC6129635CB7C0677963DC75E68
1B45BD97585DDE24B91080ACD10C1F1A186AA6F36EEE710165253F6F1FE6930D
BB028EB1255C28B301912DD3D8ECA29BCF373B00DF38719F2DFC3043D0412D35
2B8B1C4660D23A0DC868C6CFCC9E979A15642EBFC1C9A913BC3B459C494D082E
53D23EE681E4A5AE44DF7C99DC171817F154F4620E3D6FEB5D9337E9004FB796
34D477A3EB341EA95F40EE7B06B0B33A8FD7A096378CA1D0F7DDC4DEABBC8ACA
CE5082E467F29BA94E9C593E588FF473DC2CF9A4DC312500135F29963A9E4004
C042A47B64B3F9ED186A6B2EE09B216A36346CF5E8F8721B10CD41E8A472310F
263725A7AA1ADB3FA770CF22A5981E3AC5552079BEF813CEFFAA1099873922AD
552C6D30366E6F5E2E6190C3A2A4C11F588A1C7F72B80DD9C41B301B292EFA78
D34B628E6DB858E84630C97F1D22D9AEE1A43D87C278398E5A0C5ABD81AF4C09
984B0B56E88B696DAF486379793B91122D25A68754B08B9F146C3DF045ED20C5
56316764D8B0ADD350E618665966AEB0AB0159DE286F0521C03C0FC94CB0226A
A2C0B02D010916DF10B2618E936BE409AC0BBCA917F3273BD8D515C07A694AA2
C0A3E4B661A566F30F074C97AD85DA9D2C3A8473DCE7F9C525C06C621AECC3AE
C79108918C925B9C0D65658B4C11AC2E62A7850FFC2397A96AB26D8425AB400B
67D1914D95B4161D7E47B9FCB0FBB2493B52CD906CC6B2B7331D6FB77443DFAA
AE3EDD2D1915F06652C555DDC1C5F0A262B791BC0945899247E92390E3150072
D899C51D844DA928BBC737C28B54B5B71AFA610D5944F38ADDF9A0964D70C16C
390DD2D9113275345C3F7173A85C5EEA7CB0B359C8CF28F1126A30213AB44EBC
F40052549AAB3B7AFE9FBE526BDD445A5274EC2A322C802770D4DA5EDD00190E
AC88587A1CE54021543330C771EFA1E65A36E5D90DB6161D99C92FAF34222742
5B7354580327B981E54E491366B3C317F1EC8C377581B73C1AA2F992C65EC402
10B02645F024F2F6BE33DBE53CB46704628C00552276940B4BDE8BF5A0017C1F
789A5E1CC9AB4D4EE1A3A18BDF22EAAA457D5A024BED19160E796ED99B5F82AB
D2D17933DD2A6E6B0711415F83358F98C2AF7D9AA825BE430EFB96B436F06FE2
119D8AF2A2290D04A85B82F07F315F180B1725219DC3F77C5C57968FAE08D03A
8E5016525D50AE5EBBA61734B2BB7F236CFC9B0C3D209B05E8FB22993B3923D2
3C15BF486896FE3B398AE560DA86434D4DE01AF1E7A68BF85376D3C0E8D0CB81
93801D5A33FC9BF82C15A698DF89DB01166CC067EC637BB2E4A28B8E63950558
12B50B067502D4BF14AE165720FD7AE5BF9B11674C501A36455343EF9BB52CBE
DB80675A75282ABFBE5868A29E4A72C6DF05988162F0F9102828DED352542600
3522DDBA25EDA008D4CD6651EFFB3C7233F18680B9AF0AE25A96F4508222FA88
1FF53E3406C0135D21B99B986527EA3DACE7D44011A439ECA3E7D7A78FB70C4F
13B5042DD540DDC36BFEC5F2A8DBE04EF457ED6FCD1FE648F8694D576F62663C
ACF17034C74B1D2F8B807AB38A8553E4B5B12DDFF6D5C05F7092B549A881E4A5
68FBBAAA0E69472C4FA45409B5EA00A6811790D9EF6EF5B452A9C57BE3D474E6
9BB90B0D130A32C412F54DEC75826EDAC8630477C5D2496B23743372D5693DC6
19BD1522EB9FF705565E9143E38F98AAF6C37CB05CD7C1A79320C415F7C7AF43
7B8AD4F2F5BBDFED56FA3AE38C1C5EFDF898216CE35B7CF75ED637A89595FCC0
F9AB4FF7DAB21AA6B305471458DC91EDBB7F76DF9C9448A778F4D62307B2F042
BABFDEDC9E199CCB170BB7DC5A3B3CE69F746B0E4C2ADEEB9E0891A62B5B795F
E1FB8EF40078DBAB95BAE19B2C7C3BD37B2B6300A083E7D1A12507FB4813F0D6
4375228558C1309B0A33761F8FF3A115780B4AEB018EA7C3F081F5A258A6C41B
6250DD77B448449159E95A37D9CEF904EDEC7EBFB0E60995CF6457CF0B1AF997
75D63476CDB2ABF1E4A13CE43745164220E057A6860F927EAA1BC80BC534E9DF
E3D3E2FB855CADB2A3249016A057549489EB815F258D3F43940D893FC17838BB
4B9DEE76236231743453BDC0CC68D1C7CF86375B54028F89134F85E31DCC3C6D
7AE1C7017F8B4FF2930A085B75C6FAEB608862BF7F6AB1D87B4000DFE40A9A3C
EB45E402240938D8ABD7D9FC1BBEFAA704F6C6704D79E1204B091184B1471EEF
39A894FA99B8AD76C02A61A5F4FB76A992D636DD578BCBE3EC869C45568757E9
235CAF9417B269329E5B40EAFED1A810FEEA82D46B8897ADFB51D53EA9CED89F
8D7EBDB237F03DECA3A6C0795370E1AD5C069B7A80127C68342E3441F6387E33
1E218D5F5B98C7AB87FD0C0106F366E1795115AEA57B785862408C117DCC0D93
D513E3E4E2BAB5CB9131A76DEAC166A7C449A549EA5111F66DEAD51158A2BA24
C9E0FF6D1D3DE3DEF2F52928C9D4629C532B938F70FCE180655F548E8BE411C3
12AD21C5312C115BA49C0E0D068B853219B1B856E111027B029E418F0F9DF5A2
296042CDB8246003E99A206C64935188D52DA04FCD885AFBAFB97F72B6F677C4
64B42739EAA735E9AB83B76798CDDD673835B1B59A844A6E088D7F10FBE1D553
57EE85EFCB2AC20F9AB1B2D788CB36962E1617F393388A83E6A55D2913C75F1A
E7B6C4379006CC9A565D60CC7C4E1BCF5B686990B9D9BB781D59E88127C87FB9
4D1E0B609B99EAB171FEB8F53EE9AC0EDD494087DBEDF3E9C4678E6952E327B5
132BF87958F958B10401452DE8670512AE5AA12FBB1D464E6F497EB09A9630A0
063FC49E6992AC23F5E31A059DBCE293043823FA585FFDD93039B932D851859C
B4BBA7EE19FB118C6FAE66FFB16ABF6EAD04EE9AB3102AA1418805AA1D714E45
557A97EFC852307B094AA65F34455A119B1E8ABD188189F16030D25D71EB30D3
29C731CBDA565C4A14B0E49B3772DF6543262EF8684535466BEAFE4DDB96EF07
1387652391E27A4A37D2BB6340A378755102F0A7269933C41FEF176EA0DCB6C8
805E57164DA36D9B8FCA8B168FCED8D19D78937749438AE59484A2E5AC8D84DD
A6C8815A66967B7590EF2D9E7B76642DD67B231032EE27DBE7A958CDB9870975
84C71AFECE41946AE57589E52A9DAB9B4C1330A798BF029299CEA838209B392B
22761F4B31AE214798966312E16A9F06566377D2DE9A63B2224FD00E5D20D71D
11146F42FC6724B353ED2051334A2402A9C43C8B4FB30659E425075F08FEF299
6CF5D08DFB5833CD94639C33A7DE27BF10179C72A84477F216248A92C357DD82
8C925E097534595CF32DD1D50CB00B7BC7BE73C3C762D5A550C45F658BE236AE
52045AEB9ACEBE5D0B4F90DBD8D7A10527AD7A10885DD7D683E41F52CE045AA1
858708817AA834391664ECD08AAC276D3F8E5BACF61580D51504D38B902C209B
FF0F7D37498A6E2F8AC2E4CE7FF33F687FE34366CF3F566E604571D161E1A2A6
0512975B107BDBE0C7AEF33086981E774B082BE739B428F46FBFDF2CAEA78801
DFF16D0C5CD183D626883D5D0AD260F766812873FEAAF44747FEFC5918EE391A
CC2EBE59FF5A377FF6243E9B38814F9CFE771F4A5F8ADA3243C48AD061C3DC60
016EE1F4848CA1A8533BE7D472D1511F7E2767D31E5008CC54BA8B86EAFE4610
8547E6B4C3EC2E951DE42DD4403975B207A05DBFAE8CCFEB69E8793F1C76C3A2
577467242CC0BA47B411DF2A9CE8EA3FBEF65ED35C6D8E31D2914E409D64B390
B0BDE5F8F0327884D3C7467A1598A876ED18B65ED8CF261FC3834B71619EB063
6EF92E5D4E51D532F29BCDCD4D3B972E55D57FC85CD2C5AFCF02DFFB4445692A
4CBF22FF89345AEE3F911320AB347CAC398805FE76A0AA76DA0B21819E209EFB
5641184DAEAFF3FC3E99EBCF9E0BBF9C71C946EB77ED556CD01675A5D45FC8B8
1FAB2F25F2391855929C2C452295D698C749DF868B4CD058D79F8D4191493A35
0748D01CB5BAAD873A862C0FD7A8424CBB1560CD79DFBE13D597A4FF1AD2CDD0
1B331A026E3D72A9FC0E15EE51F97141125A74C5BA06497B40B6CE001EB5EE7A
9F636F046CC24897AB0C985D511CBD9A9350C9D9026B0583124740AE85360C05
7D6AAA2EFF416F401936169B51765AEE96012DCB4013B6B4E693A1D158ED9866
DC5BCACA861674993D42628DF4378C539BAE628054B5C31D23B50C2B37D69E07
50943255D62F0C84FE79633F6F7237A6EA6D71323A978165FE44C849336D7CAF
B9D8C0238645C253E713E1AABDD1C890A01CE2FA78B291B952FC8CE980E75A23
0B890A31629E51856D46439C74C71CE6E0396CD86C748BC6F84943CA4B7C0602
2700959A62CACF5B535AD5AD1CE577EE970A2B5EF29F34193EDB89F797830025
44795A6460BFB394AD276CDFFF845D7BA484989624863FE47ACCCB78F31AC2E2
AA1A5A5CEB5AF18C5BC1C3C8315FC5407318AF97EB07523349225E6B8E37881A
8E96CF4C8D280FE5179010A78C389FD7D997842CF3CA6D44254D3DFD15D6AE32
CDC856000A48D20BF8CC5F4F980EECD7CE6F6DC19A37C8CBC667F0052E5C0B31
7CB60A48AA608077A809F4F87D1EA41F92CFBAD2F3AB6FB08FD0F3114A136199
98EE4E9DDDC1FF5602C12A9365D27CF4F7328A96C2EB62080A335FFE5E7239FF
72831AC1C41FC799E0E8CEA396B54BFFE6EC39375837C3214DEC571046451DE4
BC24A0806E930F00BB4E5DA5B4C9C9541BA55FC2A0D354C25935F94955A62DFB
735639B15FEF5314A81C8FC0FAFE1B2EB5848A6C667D5C4C473061940AC9A543
977B4959754CA247C18B459CE0CDC2B673DB4D8A3B4FFB0AE7F436A5E65C4BB1
C77D7DEB72D4433FF6875CFC0CF57F755914FEA0E4D635B93F1D14F5DB640CFD
D8221CE27FEACE798C2FDA2010C13565A8231ED71D7B1E9953764BC579077AEB
6406E64CEDF79C2DBD5AA7EBEC7ED0CC10EE917CB686D246495B08B9B9424A85
C73135133A1C8420FBD94571BD0F16037C2E7A6EAC1DA1C913A9BD056900CD6B
650595A33711B773DEEB2AB1F6744B4DAC721BDD494115D0C5E8482BFF4EB0AF
6E3CE11D8ED3C707F212EA207D85667825E53B2D3539A4CBA10A9F2C57D5304E
9CF02713DCCB3775146C340C287869F11A0444A6707A53DCBD962EE7433E063E
A00AD3B807FD96739CB7CAC8BA5D07887EA875E8111A5078A3E707DE5E4EF566
2E7777DC20572C846367EBF92BE1041DA969583598E29573167EDB0A2D527F85
CF998DA83AE47D60E9A4DC0D9032FC50A974EFE2666C379B6FD357DF3E87C17F
58BFC971A1DB6115F288F7CDFD10C3EF863F2E99E39225A7398FA7494BDD402F
EAD4DC22DAA8DBD8E81D9D7BA1F118F1B439D4580B34B1DFEB91897F7382E074
2D5955EF3CED3AED1A0EE4C8B110F432B28345C14EFAB5C92C6C7BA60D986664
AAD0238D9F194AE4C1D462DF9AB227534A5BC3A3012C4C1758C2170F149A5261
A7CBCDF0044CCCD5A37F0F3D6FE383B60FAFA8FD6CF8C62F0588DF40D52AC4A0
3D90AD17C1BA47C390D4493EA2A217D6A8E08A6654CEA945BB43B5F8FDD6CBB0
FED885294F51C1A611C2B8D645F3E352036D045D09171F3B3B6CC8BDDC662472
6A82CE2F3CF7E35FFF1DA4A4B30051CCBAFEB65CE4C9A878AE21642CC92B0F9B
87A2C0B20BCC6DC39B0C7E5705D424E93A661FE6AADCA2A8A47E4F9E98E73698
48BFD747094E5C56E3C90B5E701080E08874346CE4B19D2C24D19A773E2D7F25
254319713FF1785D13590FCE2CFCCAA9916212F232DE54F6594BE6A28A8A4B91
427FC96DB53A0CE74220D3D39642F8104FD0E52EA8A2E6F78F3570B45DC77990
55540BD1D75C2327DB4BAD805E4F0CB07C3214679B318B912021AA52A0CAA562
A06A80095EA0611B022F156F79D332F6D2B4639D5F6E68FEC261F15E006EEE8B
20479BAB810E4253C92D1C664ED811CFF9030F7645403F7C63CCD4E60FEC51EF
F2AE05DF8E75A3ACFD1B69E79CB046E81019744084475869501145E616C416A6
AAD6EE6D11047C364EB8747A414F826AA91577C826E8F13F8DBB891B978346DD
920210C0211E8E08D4F5F088508F6B35FEDE36D50DD1324025ADB1CBF4C91A0D
94A61393885726FBD23F415197C1B5E563C40B393D74FF46AE32833610E8CEE4
7DCDE878A1C3266CB4EDAF3BB1E94F440AA6F682179D50613D6F9A9FD7FEA44F
2B23E9EED18D29F75CBADA27053982D60AB6648D5572D7CBEADABAC9C2131804
CAE7AEF6511F36642139344B5DF4429F0C4CF36A23A54A65A58004BA2845B3C6
E61B64A230B72114DFBAB7EF5BB9468D9432FE5901405916A9603857D16CA8A1
E8BB2ED1FD005E75D38C2E330E1BE1272B3A5EA23CB2B6DA3A300FD4606E3B35
20C7D0AA239CD2DFB52F11AB0F7C1C62FDF37E3804872EAFDBE958CF73D5D7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: HFBRMI8
%!PS-AdobeFont-1.0: HFBRMI8 0.6
%%Title: HFBRMI8
%%CreationDate: Fri Nov 22 09:19:20 2002
%%Creator: Harald Harders
%%DocumentSuppliedResources: font HFBRMI8
% Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/HFBRMI8 known{/HFBRMI8 findfont dup/UniqueID known{dup
/UniqueID get 4214387 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /HFBRMI8 def
/FontBBox [-112 -223 1059 750 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (0.6) readonly def
/Notice (Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de) readonly def
/FullName (Computer Modern Bright Math Slanted) readonly def
/FamilyName (Computer Modern Bright) readonly def
/Weight (Regular) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 14 /delta put
dup 15 /epsilon1 put
dup 33 /omega put
dup 58 /period put
dup 76 /L put
dup 82 /R put
dup 83 /S put
dup 110 /n put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3166449D69AB0542CB99558019EE
97CFE9FA87FAC14B55E860B5663A3D528CD3784FC9647A2EB72CF1AF4E31964A
3073722CB69FA5370CC5D9CDBF105662CA6188C1B3BFA7658F71EA5765A0D152
E60FD5E1DE3B99CE70C03D8CB4F775B5B17CE9573F5046E61444C0DAFD894CFE
E17604820BBE5A8FA11A10565933C0A8320DC5D116C780706E315C54E72426DD
AF1E6786D883AD182ED327CBB03C39C1A2602471C39296B7681215EC4F0E0E0B
264FBAD453DD3B112065828DC04E265255F88A98D894A53C2EA239F60D259B9C
CD7E04DA11DDC2F3A22D1894C225E050650EB8F164303A21EB3E4ACA9B4DFD11
CA4ED32D27854CB2E5EB24A30483161BFABB328F38A4D1678E6036D9DF643AB5
00DB54732D4B8E196B9DCFED234BA0AB91D8AD043E1D0FD1D1D9BD3C56DDC8A2
14ED696F54B14C365C0B0E226BB3B496A1E39E96266E081AE341D0D85CE6E27A
B8A8A52FED4E69560C1E0F97FD1C0092B4FFBACD0D05566C8D27C3E58FA46977
AD51C7231D053AEEBCB06CF962EC4611E6101893591BB373F3C8BAB6D2C8A7C2
46E26B1FAB9547643258BD3EE31D1EFAB387DCFAA2CC46426AFC1B62B130D207
1748CCB0B4DE24B7C17301B1C9B8B8ABF4BB098A213E2413F0E66D4D93FE5808
C62FED409D5F76C5C5EC8113DBEEDAC194F409A76686B08F5877C2C233CC68D3
8864254DBD165E83E3379F9E175BC31202B964CB5A81DAD34597170925DBEDA8
D30945C0C7BDA1D98D159FFAF9EA8134397822A8E98478697003275C759EC25A
3AA5C0C65FE6CEF48548FD157EAED0946A12E1B62C8975E5D5D95610C68CCFC1
9B457B2EB8BC1CD106535A25BD61E0B06AA3A7277E2B24616873829D585CA62A
7D2632D4196568D86CA9438A2D33C4E00BE50927789C8EDB3C0B1CA86057AF71
997EA9EA290EC614552E1BF452416F0FDA295D364CF0416B9E2755FE75683D80
A1B006A5ECBA515D419487434488362C7D16222179BC54E64C0F6AD4465A919E
E2CC71A41D2C95F101D1E4691B09B50CF52FD2D2E95799C4B0380E64F8537710
C3613A8B5A4631A41300E4710D8009D75EFE71D92209E2081A53544251835DE1
232B745020D3714D068C1B479641FC3E74CA84DAAAFD920D39F198D67A8C73CB
AE580B7948CAB6E034FB41498BF7EA293A26A2C5E91F724CA3C2970A4B32B4DC
6D195A5570040A714AA9197EA7D598EA1B4C648370AB9DCC4112EBE9FA9AC6D6
FCE815A87251CCD9FECDA66679BB4445FCB5C802AC1F7857B8DFA909A92DFDB3
83FC2F4245DE9724FE3AD88873D97EA93639CAC4C72D8E3E0772767C2C7F1085
FA39E8832EA55BFAEE2BDE004A8B7F463C933C00742EAE1B101E515597C1D40B
E38235F3341037C239AA2D0EFFCFD6039FC3259FF9C839DA19BAC412CEE87D22
DA6A1928A1680178379E40B547B5A28B4F82FA00A8A574B26CE5AE48B4E19A77
B811CE9A63AEDD6BD2C78DC6DB635FC902FA2D6A8E2619CC57E03569E3A322BD
CF16C5157F6C43AB035748D3D79F93C1DCF7DEDF7400C629A4AB31A55E096FA7
804AF392F152CDA0CD204B7ACDBE0067506C9045919D1B171D16B5268A8F058F
49C87CD2665496F87C964048D4410BF2DC868DDF0FD3274521794CF66F2790A2
3D1538F12E21F431BF03BA48FE5C0E03776C89B1911A59E60A47D75DEB6ACFE1
431996E510958244E5176F65E6E34994262C3700442278934D27BBABC9A2ED22
1DF179F8B73101D521418115EE723E78F3D3A505B07C4851DC8C47B8B4B8AF8B
91F9648A6B3309E0CFB48B8A5544EC6E1A9B4CAD33561E51B38A2064548E88D5
4EB3C390D3F3225B389BECB4BE4EC83657A478FCEA2240A71D8CBB0CA06EFEC1
B64E73593D296B514F4AB9B4569B2848880F0A0A744508D154ED1E810B0F85F7
DCDF4FEE56D1B2E8F5F48A53DA7F3B3E52F678BD96276BD5D5831C4B38C4405E
7CC50C1A4ADC99D7D6DCEB38D2153611AC3A6684F0D43F2936D0C46425179326
B362DA7CE983A89BA58D16A3D58F830B6E004799B16F310778EC33509D51B8E8
9FB950673A84A99EB64B26A97C8DD3E6FF7C5A1597AED15681CAD94C91081310
6C587FCC3EAD802A2903D8995431E55218575CED40B4EB39BDB67AA7652F0FFD
F75D46589EE455CB20BEDBDE93C03C60BDD04D3D7BD9AFE0C8DEBD54D7DBD16F
1A9AC8227140DDC5D9ABD3D13D70E1F1621579B707D056BAF7E9507BF2DB6881
73ED49A4BAC35090DCFDE7C186447F8D581E03DD2A483A043C2AC4FBB3AC454D
890689373DE91290B15B37BEE78A108856D57131E76042145ACB5466B187DEF1
5FCD9E59E5E8776946EEA0DF064EE08D556F6AE0B81CDDFA90ED875FFBC1C16A
A0D3DF8C34FDD50F9A7154797947F357CD64096B751F427B424DC94D2A5EF7B3
FC88525AB7764A45CC1E1C5C84C4DCCA7D87CCE75FC32F8F02A713F79FF5B0D3
A2CF63B7C5644EB3900EE52551839881E5739AB888796423481A315333A4A900
80C55730EE9C31D567C7B6CAA04D9285963B81D29FB72773D0C167FDDCE2D0BC
132B2882A0857542D27349B4644F1A711C20B56C5BB46A8DC8B308AC7CBBD418
8006BDD3FE5D9C877DE5598E69762FE55FB1E741D80AE6C6FB7A7627FA343D1A
2032CFE4B32637FA3980264C4DFF76FAB2D93EC06FBA1DA4E3B8376912F8FB17
A3C71F1A27D9ED15A7C32DD790335272B47DDED926B9AAB0FD568A7D66472996
EF7DE588FCEBA4672B1AE52B89EEBF7472CF11D1F5AC1EBB042C6008CE6BBC84
03A13D65D1C455347F37FA9375038CABA6E8AA51547744B95CBDC9AD9B25FB67
454C6CD8BB1C5C77F19A4ED9F385C9FB0ABA3842E1667F00AADEDC3F799C4380
BD538FE21756AFBEC47EAC50976B7834A57C1368D0FE04D13C14A5FFE9CDF6C6
E3C14855CCF9E537B13DBDE1D45C119DD10D1A4195F85C7DECAEA16919F9C0E1
8A1C7B5623558FA3E098F322ADFE009A3E359911F0C2B772267446C084B921BA
33527425AACF0645B0B1F0E6E92480BA41DD76C76E3B7C004E1631465DE4BEF9
639785784C144388EE3AA03F433ECFDBB1FC87D8772DC690F365B49DDBC92EE9
844E3998418F5DF9988907DB8FBDA26C8698376723BF4B4E82B7D22B4AB9387F
A7FAE32C8DAF592C73A9974DDD7DD10213A132158B53EB385CDD377D7030968F
145793000E5B9D630111D5D22FEB874F7961D1B050E45E6511816BD381928E5B
95C3CFC2BC8048CB918449700930F89693FD9673F1648FCA3A82A1238797F65F
C9A52126B0C4C13F27F45766B85556D1511FF24706C3CB393BFAE3C452436484
8BCC5214F8829D51DC0E6A1CEDE35ABC45F6C5D8D941FC8CAB169101522D9AD1
A7FAD1CDCD517AA325E70D6774CE1250BF9BF5B347D674A50E310F903A764E93
59B2239732D48E4B0807BF838044FA93A4FCEFA710D9C92FB784ACE71B5BF28F
7DBF43C17DE99C7D79DCA0B4E7D2A9C370DA4DE5D1EB1A48F6BAEFA1B75AA299
E0C91DC3D39C9563CEA3B7B4B2486DB92B3807E53041C4D295AEA0EAF17AAF5E
2161C1EEC65D9D462CAF26FDF78FB2C96AA07A6F5CAB4095B4DFAEE7F9BA0B53
43BB21530B2FAA18BCB5513E7D48C1CB7D36C41AAEA2C055C8BD6AAF9406F739
106A6B35210C61E7FF0BFCF3FDA7B16FC5FF08461183942AF68D55104F594DC4
2EC7D56EA3D8ED802FCBA6F4841C13B46BA46B2249C13FB8EB450BB0DEED36EB
EB0A4D86ED37344E7701A4126E39B9248EA3FD5A6FA89286917979AE7E055E31
2A0D75408445A91DD7E51EC1CC5F5B59AF7A574655E63FAD31D3B4ECD8973916
C67A11A8A18682E947883C18EA092FEE56C94200E6269AEEAAF7313669286D2A
8A31D3D783F0D7F76D68CB5904C49DDC430F79BD8DC0FCB3AC7A22C64D888C54
06CDD293768997EF66D908B81E9B372BB58DA25F7E3EA6B6DC78C3A40AB1049D
4C6FC453C2D9C8D9FB720992A4D6969FD271B40327EA94C01657C421F0A01028
0EEECA7395EB01686A9C1B084DD1E345B2DA21B06465C8E5D951A54F1CBFFF25
D26775D6E1CC6AD6D8865ED0A8DDE4BB90103D01B73F77D4AA195A1DA85B9A1F
2AF82F129F4816C96DBAD371AC1563E8508C54BFF2D51EF0B644C308EB8FECC3
29BE29694B07126EA14DC67F681598B1299FABF2D953DB75BABA83DE0EAD0DF5
AEAD8D411254FCDD30773C5A6AAA454DB11B05E548919C7B4913C73E2CFCDF86
6B482CFDA6710C48D176D6C5A783A720111CD5B5823493F1FAED17FB91CB3C3D
CC4248D6F5132AADABBD491C5B27BAC6350A76B1AF82F4C9BD57AC84BF2DCEB7
A37F74D62030630FD33B8B69D547965153F778B9C18A4081A50FB67422DC08E4
DE5F9039679DFEACC0626045DB39A8A62969A1AEB541482A4341BE4BC5F48510
E32887276377E67141A665425480EE91FC025B1E43295049974C094E12F565D7
4FE5D2703D2CD6675D9B68886A90D9B50F80694B9CAFCD88493F8B7BBC0268C0
07772E36DF1C3D6BF41CF27CF2FC0B196029AF5EF257CAC16CBA8E555945BDDC
3684004A9F7BA7D06D630B552317CF16BFC219F9DC137FA4051A192092E014BC
B0B824D3CE9625DE1C04AA0BD97E586D51D1D7BAA834241D1C37A9939BCE0388
5A763B2280FB7B0203A8D6EBE77063C322B5DB3F68C51FBCD17F7930C729EBC9
167E549BB635D93027638CA8F5533534E06108D054CC7BB82F50049069C241C8
53B4CB187EB118DCEB78682A69677514724946281BDE287B8651FF5ABFE50911
EC432D5AC58E5BAF900939EFE58A57102428DBB7581551D6EFFB992F858EE648
72E428D8F91D724AFAD9A82B3CDC3DB2C7B19B0C46238434CEAFB4E056F7D859
5AE498BA87DA032960E99945DB64491FD34DAE1899ACDC1FE1CE8BF7DE3A377C
9416BFD2CE3C54E215D7BADE8DEA09908017407E9300356DE0586D2D7CE9D9B7
F4E371678948FAEF81964F9F5238CABF7A228E0E8A3D6871E438A79518F294F7
455A94993ABC4A728F2C23BA099CA0299BFFF6AB3ECEFB077CA4A5983900ABF0
392511DCCA8B8EB2CC1E3AF03469693E6BD234FAE13A1E30D0CB75AFE5FCD30E
708C018C41A41DDC1CAECDEFF58E393767AB6F421A18FF896920457A4D4F636A
91E4249A1744548E4053C6AC3320158D90292DD23715AA63AEF7249AF23304C5
1E0E268F55AA671E3F54BF495CBE1B0E5886FF10CD990B0F593211E741A0489D
678B6F4DF3143B7C5D7872A2A942B73B79AB3C3551328952A376842143CF5F1B
F3BE550DDA9F4638C6930A54B19BFB0F3711DE78DC9BA4F2DDA897075A7BF559
3F7C2F92DC5EDC232EA7C5BC39FC99426FAB9DF0A9135527A7965618AF1715AF
A4BEE008D786050B54E832BAEBB25D78A0319AAA2CF08F3A0CF539787A1B7C47
FBBA8D2BED4555DB43FEA826AA56CF1D305FE2992CB8B183725FB38292FFA999
B6CFCCA9A42AD6FC03E921D6081E42DBD16934805B983445249549BF34ADE803
16EA8B4E502D2DA1408D8B594C734936A10E9500A4A317D90CE80463922F440C
CC874DA70678BA32B08AB78B633E13A7AC8F52A3F9E46BE46099990A5B8B6DE4
8F78FA005EFC169C657AAEC33FB4346A1F899EAF6F406F7001A2FB3271475084
B18442D8676D2618CE46CFDA2AB9749C7CCDCED85CDD546EA540440BB5568978
0CF448596CF32569B7DA1A3970886D8CDC0CA475D578AFEEB98236AFD6BC9BDA
DE045B573CCAB01719DCB9F27738EE9022509116EDA4D07DA621C2B8944F1D5A
EC1886210D2086653EA0E7E61BBDE7932BDF9B85DEC7B4A0BE0E9C9B8BC8C345
4341EC11F947836155F812685FC5B590D95D812DEBE368BF55FD1C3E1BD742A4
824AA6A5DBBA711E0D77CEAA11373C4B2DF419A1BFA05C8732E199856BD2E03A
BE8F7B3060C06E512483B50C980503F040300E9D3FDAC9C2A7D43A81CACE3E85
883F23BFA08FF7765FF18251B03489952FA81325D0E59793924331177EDD23DD
DE2C5C67FED95C5497905DF99347B84663D5BE56304C3DF500A1F8C4B6F444E4
EE1BDFC905B64EF4601C711787EAC1FD583A4CDA9F73376AFCA0C0D3229FC2D5
6586F63C4972687896EF7371E716FBC54CC81767B068FFEE9D9E251B4D4C6792
9699F3D575F2CD810D0D2E0E34F3DA629DF253352D31CBC61B35942AF259FBEB
E37C1E40236E9AC69346985B03123B6BDF0E8EA1563D79A188915DC299F5D8FB
75F221C3C21ECDC5DA2147A5FD94D57EADF4FCB46298EC6857FDF8E329171F42
A3E0FF618C2951AA863725EDDF812D4612DD12690F49F5C92553DD43B16A5AB1
0B27131BBC5D515651E725FC78C675225A63AC7FB0CCA61CCD0A225029351F33
5A0CDFF6D7DD178D9CFE84AB5B575DED2143260D144A0180338AAEBB3A0D8623
BA234CFB744BA104C7140B306697878F2D119B61EE57F923214E7D2CD915C2B8
0818F83012B6A315ADACA29611070046D3A01C7FD12C2A68448CD4A59CB06B73
4F3D7B926AB289686131DAB0BE6CDC3C8300A62948AB52FF2766A472E84DE18B
AFBFB7DEEBD9F325BD7E475B8420D406653A7B2F24CCFABA13AEBFB3E06F0B68
0FFB77AC7959B62E60F0F49472BC4817A6D59DCC413E0370B49C3A854DFB0612
88A7ACDC3CCDFB0BE97E630DA698FDBE032132F16151FEFECA6CC6A220125DB7
2CF08BC3B4BC3B498225FEFDA1BEE1CF26583001BEE117A274DE63006D72C35E
BCE2CA0C4D27ED7600024DC0542EEEF27DC402F45F1D5790B2D96403940E8DEC
EF544B2885990681E94BFFEE050631DFBE7C8285EFD18AA9A522F2083E1BA4A3
B38BEE670693F1646DC1736C5DD577A59609FD2FFFBBB743069B18E4DC6E0AC5
1F6DCA700D584BC2F3DDEE9F8EF3D33B6393C4C8607FAABC731A7444483EC6F1
683DEEF9EB84E24C5B6BB2E9968CF09549C8353076A24893E65D0AF47B1153A9
8DD1E4F5F9B92241BD92519C0C87466DE85A69380118EF40E197B43C6CC8E651
88A78E80E26AB7C30B22F0B066A620EA8640DB1C47756DBCFF750F2D84670FF1
AC882BF61B89DCB64617DFF073EC216BA422C969630305EE6580B6B27FB98AE6
F89B6CDFE732B3161695A86CDCE25C8A5D093ACD5F2AA79C586D63BC1F9CEEEE
AAC146FF437AB17F74AF08D851CA24337FA4750BA863CEDA9A39B42368BE93C3
0A53E3C66567832F72750409C47CD1CB7809AEF240768BA08A0A751428F75BD5
71C28DCBD07C93814C006A82175B732E7A521CAEDA21206963E61ABDEA83EE1A
71DAC370821DED103BF312B849BE85D3254C6CC6710606D3CFDCA014E7368229
1350111284241C318AC2A883436998A3DC9A752185D469DEB28C8A20B1C37696
C2A253A517E672B40A73FBA34223A9C6B83C76132493CAC128BB366FCF98D7F2
0359408A700FCF2F17E2436500425ECB56543DA86A136F54C47B0F8F43F824CB
596B51723F70C8D1243F01BB10EA4377925B4034F6BEDE5929713AB07A40E0F4
4A6460F5E12BF88EE893ED936357BF4CF285488B57A5992B7C57434A8895C284
E3B656F636A4D376246612023777E60A5A8FA8F5E5B2201B948FD526AE7AE3DC
F3494E800D85E85E3CD8B5C4D0B4B4540C5DAF30DF419DC29143AF1DCDCF73BB
1F2DBA4401F4900E1D24457B9D4EA2A74A78F687044FAD00A7F0502C23106D56
D5B4AF79E89DBFF76BA8FB41A53F00480D6E7A0165BF90E8FE5584791AFDE3F9
A26E733231DEDC7FC7BED52E7A45C63D6376C8B62F82F71EE259C4C843CBB5F3
9D019D928D33D4DC6CE91B83AFF6968E169E5FE0D6134686F60502A5E0A5184C
4BF062EC5F4BA59831FA169175574A1D4F14180D3B10228AD1E71520E0E62099
62BD3406653A98653F419EAFBB18DF86BE7F660A1694F7C92D83695EDE326105
FF6C0C56A01B165033544CC771159ADD20EA5D10BD495D1151F4BB20BEFF6064
0B11A5EF8237CA9D177321F9F6B14AF21276B0F2BA23B7C09C582E1945BF8D20
CABEF4F2F5A78A41E4B4A8AFC4CD1348704810FB580525AF98AAA049AB1E51A1
554FBA2D017D1F18B0F4CACD46FA5117A1BA977B41D1DA4F460189CA64DA2D8A
C35DD10A87853A4C79EF60984DBB147C7E2FC1F46751480BFA1B9D906F937D5F
50730F87461D8166D473BF570B3DB7EE89E2B7BC93FBB87AC0D15C2818BACBAA
CBD8298AB19DC97AFAC6B628B895011B8D2DD6CD203D4094F98FDC978D8BF548
D0B7DECC04E1E7C16CADF953706FC724FC6A2F2310E1DCF7DBB4EB6DC1A62F4A
7C08D2B1CD77CA8EE228DB5AA9FADBBD1A8927B007AFBCF472FEECD54A6AC6C5
1EE8211E1B1745FE9CE4ECB3256A586500AF410ED87F407F9B3986B20A60A1D3
5C9B6B7062F99FF88ECD5925BC8959103C9C5F8C1348AE7832131A7AA3BFA18F
9CCEC7ED8B688C98B0C8AE78BA16EBB8A01A009D90E8B48FCD0C35C91D17AB58
406D136BD7CE03820D1AAA3DAFFBEB5B44B1C97ED6379BEBB58E3F5132CE5890
E08DAFE28DB644B3CFF87F4DBA88E04E4D833D06F753FC3BD99FA377CE12B753
1AC67791D0E6842693642532E9F0DFAC1F6B997B7696988A9F2B3AC897A10789
DA53D2DF6285D0B5A99C79BCEFD3DC1140C4FDC3EE4416B751C0E4DF5267203F
C41081B9ACD56DF60B04E639F45D7206F0DE446EE6A533172C3780943F2083EC
5317CE3D93563F2D6A04EDA65E7B522F3730EFC0C255C0A52D5DA72DE52074BF
E7F0B04FA2070F82A33E3E4B92C122B4FE83692FC7D8262325C2B010CF964E78
3CA9E014F0C60ECF2456E142659D92E90F2C5378E7276314EDAD62EC0BE1A6F5
ADD376796365B4A55CAE9D98FBF0EC97E93186900E19CAE94C29177BE1599631
F437AB6372621CE12156013BFD75EDE9C99E1A17240C4377D3AF8A4E23BF12A0
8B27734691B37CC8A9FD63C005097AB96AB0C59A00DF442B2AA097571713AB38
B1C20D59F9F6DD20B79837C90F25CFCCA5905D3CC030AA8EE2CE48FEC76E8C47
26FD3D2D9172870F13BB5762AABE69FF7315DDA8525DDFDB22A097B01E01D66D
E55D8FD313F51BA19F9D5BB02781F292DF09039446BA3AC9D85E1E5294FBF48E
E093985CEA2BD51EE6926FA718EEF7FC12C648542F59807A126B6F9CE940B328
AD61BF9151538E47F3353A4970391A36661A58742975D5CF5EE8EA88234888B9
B7859EE6B0E9313749E436516518542AB92BC063CB94BEC393F7AC612899F38A
999CDD672AD5ABED614AA483E00EE93A469326883DFB3EB9B157C4EEFE7B4C2C
AE491F38BF65DF1F1DA5439DBC802B4A9D803BD635C05E10A8495C2305C7DA73
91F7F20453206FC27D3F8F02A2F70903410B4C7EE09941F9ED40BDCDAFC20C8B
E69E944EB87C14221EFB3A7EA319B4EA0EC773D5C913A15C1DB4324935F474ED
CB620ADD71ABF4845AF996578C73060D2FEC1F218A069053CA2B0A1FBF490CC6
21A6D9197FBA488EAB0EBFB50FEF925BA6DF2F7EC96D1D523CE620E159D1A91B
4EF0DBFAC9967E6C64973E2571377BC9C45114130923586825E363007FB213BA
BD5757C07FB38DE5C5CB5D530CDB8376E52631A32BB85A99B0DEAB86EF8680AC
D46A04FBD48EAC90FDFD35FD5EED52EBF1AEEE57274D422F9BA22A2D2F34C2F8
4EDFF3ADFDE37CC5A8BFA27004F390A9E7BC90B8D4D7EA51FC6D74136744232F
AC7579DABE52DCBF1EF50C7BFA2F130478C2A03674870F9FAFD22BD2AFA22E6C
B30732E502C92D35A0618E0A1BE754949F6488FB99AF0D7FA4DA1316C3C52797
67142D132F62ECD52FBBC0D754AD58FBF92629DC8866A0698E72EBE2F2C0A09F
68895770EC42B469B08C7092733A2045266952384BB5EDE175FC7E481EF74C90
360755DFBF7894ECE5E198A6C53257207EF1D6DF448C97CD7C7C9BB2E465A354
B42C8975742F75BCB6C0CCEE1136FC7EAEE0DADA17371D616CC087DBA8854E4A
1372610EFDE456C66377776EBAB2E91AF0BAA75B8E9F4441F44F25EF7EA87CEC
E176E0CA070806D551B4CED96A6E963BDDC76CEB0953DC37D845D170CC98D0A4
8CC3094A6C654B21641634CA6C9B6C1C678D563B81A6222B85CA1C9DC7A715CF
4D65DB212D044D41E87D9F04F4FA78553B4C7A0BE6DF82C2E865D50AFE8646CC
F705322EFC4802EBEDFDEA9EB53FEEB1C5FEB69362996B1553EB2589AA843A2A
6D2F075B51C3D1E4292517107A32A1307C3357F0298C5FCB53C08FE87E0479E4
035BFA9FCD35CFF28E06C82EC805D6D6A768A3DBD52CB98E02A0827830599BF6
A085FB197F2A2A424CB2F22D2AB69682696B60381CB8257CEBB5AA8B7FEA7330
8A3EC5DA24457DF7F2AF3AC024671CDD0D3D749B6AE1F7DAFCB292473BF0C1B8
9EBBF386B95E4418DEB61EE54B9A9961808ED7479CAEE6A6B0195C04643A624C
9E98102FCE87AA4D044C31C1B0FB1F020B80874CF68B613BEAA214C709C0FE7E
3025C8C84F651B7DBE3E7C7BDD5EDEEB23F1EBC5F88FD705FD48EC76C480FA06
CB61FF5D94E53928D7FD75BAE3363E92951571A92D1F5A183E3986E64690F129
CF8CEB2F702C6BD208268BE74252619A59A89D9FB1D24BFD71F0C627EBE69E71
41B78D4114AE5463BA6BFAA04B8C05CB205F2B2221EA463DE5E9520FF467D0EB
79B96F40B1EE77F58D85F51975C1B0D31A3D2979825604C04703D15AF64BC9C0
59AF66593FEFA1CADCE3A965378B1968CBBC3E17FD0C73F69F7229376D2248E0
7B29E6AFF2791BF311F993549E7F02E913CD442419714B24E8A07F57404DD236
B97893EA06FF30AC762BE4FBE25F87C0E74AE14445122CAD651F73038AF418BA
2B7119E490F3B7208B8B36AF582340CBE207B8C15D9D9DF50D5878702D2093D6
F2B850F626C8BC562F3CCAB7D15C6C3D9E655A8ADAFA9928106A12531D94B6E1
BFB49D436DD0ED57A108E61D17F1E39F554245FB693C7C297D266EF13D18FE46
8F77587DDB4C5D91F5DD702FDB3EBCA4573007ECDB75F0414AF5415F4EF75F0B
35DC501C1D6F3264D9E89863D1AA729A8A2793329E8BE6A926A4515D6E911192
A077D444CD3609D36B4B74FEEC85D37ED8A2379774201E4DD72CF0E31C5F9197
2AC1180F27B77FE51436DB5307D613B4517F0B54B709178BA58EE5A5AC45B7A9
C8E2BB6461003409541C84BF5DE2FCE60DB6EA5B5D7B96179E49A8C24A91293F
7937ABDE6D85BBF008677D099F902C6DB4B7A1D72EF4DDBC4DD0A30E36304B05
4787E3F189279C523F419F5DFFBB46E2F647F4DF57137E219B0C5EDBD433BFE8
A304C85FA9DE4B05A7B57023D02C60FC43A8EDC65FE39DDA8AFB38CDC951DF8A
9A4956AB20670FD945AB3E71ECD73E774D6DFDB0D0DD759968B3AA8EE192D932
C2DEB8968C71326D30F33AD4F5410FD0D471FD2A5B1EE261D05F2B5D79BF6B38
8D157572B83F3C72B8E44E8694180F1E93D71B95EEBDFEDB5E56A3D4E407EFC2
B36CC53300A49CC9A8EE1941D4F47F2F80745E4E230AA031F51F4B658F6D7678
CF3EAE3711A6033BB0BAD70DA624C19A5A5B6522A3D7A352358109759DCAD1C8
DC782E1F258FCB1823DA48D9389FC37E6A7BEB193D02F099BFF0D98B62E4488B
ED3499A93CF37DE1E2A41C858CCBF8346D8CFA68E8948EE27B8C4B6E8B4F05BD
304C4919C4B19D0035814A2D54281C79BFA86CEA3D04E5CA49957BA8B25CF65A
989DFAA386BC53EF0F85D8BA290DEE2DC7BD5BF9247B7D70E5746D466B833D88
D9DBBB9CE2E4E6BC4B4A58CD1FED6B45233240B75F1AE88A3FF95386DC416F26
10979A63A5F29C484D4A1FC567C921F7AC53000560C75AC76C0FA341403DBA5A
C958B9D28A9A50952497DC01D2467664D5313E6468E9FF848E3D76122235C2D3
14A33E4F6A8C6461301777A2E3903FEFC7B60CC1444FF3D7F27E157EDA914D66
98D50089E15C23857A3AAF8F4EF644B14AA47CECD1F0AC61FA3BB4A45C76226C
78
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: HFBR8
%!PS-AdobeFont-1.0: HFBR8 0.6
%%Title: HFBR8
%%CreationDate: Fri Nov 22 09:12:21 2002
%%Creator: Harald Harders
%%DocumentSuppliedResources: font HFBR8
% Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/HFBR8 known{/HFBR8 findfont dup/UniqueID known{dup
/UniqueID get 4214376 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /HFBR8 def
/FontBBox [-81 -223 1112 753 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (0.6) readonly def
/Notice (Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de) readonly def
/FullName (Computer Modern Bright) readonly def
/FamilyName (Computer Modern Bright) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /Gamma put
dup 22 /macron put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 54 /six put
dup 55 /seven put
dup 61 /equal put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 104 /h put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AC06351EB3A0C388FDDA2F27B3C21C9B44B099EB522866
390D8BAC531D259E9A89584301FECAC58A1C88672DE2403BC53580A4970194C0
65946368437316E8DD51F6F46CA3C8959DE0C3803C2F2C452D6C58B0F18BC28A
FDC98B001B66B71B54071DDE46306348F7FC149349AA155358D10B954B37D002
E9758218489CF6D5FB6B271B9C9D9C1D752711E060D0D342BB1E41197152B478
12E3E42F3D113786885B3A1B512D68908309ACA46369EDA3EC63C3F58619E4CE
F5DFE55499A241712996CA8E4007C90423307479BB90771F03CFC4A924888BAF
9C600F91585838DFF3745BF697B84FF928D37F28646A8D6DDEF863DBBBF58E9B
26B49DA182B712F9D7858867D2E576B2B23B413DEA8BC4CAA384BF14999DF19B
B90422ADA2FDBD8E760E7EA6357C31A06650A3CD61A0C61F00A3396506B7500D
B0204AEB243AFA0F23A9CB0DFBD3492C29C751BA3C992B39FF2D153D3CB0DADA
181B7C5539DB80F24E1DDBA4599E890E2ACE6F98C9900CCB4675280A10CF060B
8D220DDA1BE55DFA65715EABCC305065CA1E385F18C5A8CED3FA7366171A7B98
471DA0F72CF84299D23D4164FFB0F1ABD9E124FF2CE4F192625D6C765E16CB89
DA36A06F4227F1F70EB4DF0E88A2D615ACB7436680225D1625912AEF1B4F60DF
BE1AC6CE645EB032312676B71EC40998790651F88BFE8CFA82ED6CD4B639BA51
69EADF33289FD5331B1D68AC74793F464F6BEBE25ECAADD5A7FEE87917A4C63B
9CE188D7DA9E03C08EAE590E3722DC95CF56DB06DA514B84122A73F3CE2902C6
818B74BC3E005CDAF99F7A96CC86AD60E05E933BF633E0DD17BA5EFF05EF92A9
987854DBD73E31BD3229C5F8939C53F1AF0B6082771F5F6CF8DA6C87DC263061
344AE906B7B19AC38E4873763A2104894086F25183DAA9D8854035790F6B0B3D
D6FACF85F9D766EEAD3A0C74CBD62AF9857CD9F7E078D1DA94B7D89BD873CFBC
936787F84DB69AC6BE1E185A26488ED694076627CE629FC35D09B8A4D791F756
EEE50124C8604285777D95E7D27EDAAE129619B2F4C1284D66F1499F3BD84F79
BFB78623AF4957CB948EFC9C9BDC7C81CBA60F18579FA9E02500AB25E770BCFC
5B8326FD06BD8F3BD37EA603CBBF11C6D4E691AA899C9E6F9ABE2E2757402F9F
7817BF9B0F2BE120B0C0F663659BBD109420C68C2516C472A8514CA08866F597
6301EBEF2ACB3D7E918BD64E24F517ED326030FCAA6F3262DCDFCAE93B9874D6
7890C8348ED94D1823AAB1214415D55F0490CF48FAE192F7CA09DC02F73B7E23
78CC6217567E4237ED635ED9019232C234505B395851637503A6265C8FCBBECC
B9206CBBABDE8C4E5E6E6B61FCFD3C2BA11FCA9474A6AFBA7603ACDF0BB64DC7
7FA78F87D3790E0FB60A9ABEC6F1FF955C9F58B2EE9650552271020B06E1A3E1
59C78437EB057E444AF8C88FFE92F26FEAE093454C8495181B0E9988DD9FF2F2
F7A1645E6B6852258F70E467C0A77E0A3D71A628ED2C5458AED85433ED380CC6
A59CA288380A1728912DF333DFE05DD65844C8512CBC8FA98A881F22B81F1A7B
42568636764AD99AB786A3D5D0C5AC216EA68F8F7D3A5BD929EC763FDE6211D6
F89B3F9D78E02236BB93E0696A85C8A5500B36D31561E97B7573B38D010A0D89
8D70770C7DA90DC296BCCF4BE7EBE0B75ECF0D8A4D1191691E07DC5BE36E26CE
D540AD9C2700777DF1CB5F12391781D155DEB65DF013B93841AD6CDA3D7A55C5
58288D9E83BDB1BDA7D334797634DA94BE35EFC76EE5745D1733D6FE91AB605A
D3B5F826D7399672933EA7C28B3151030A8DCDA24DA7CD8A3687E83626D76DF8
517FCF5E29C24E876F106A7E08C2000FCADF613B8379692064CF9DE6A4EA992C
3F5AE4AA5EB04EA633D900451AA5F9DB2BF7005AF03A3E3653CED7E9D549C6FA
4B022F6B2AF86F8CE299C6073733C3941C91766478220338A6720F8D77DDC413
219D568B5C6A31D43C535F1DAB6607D3DD612B7927C6B66792A870C892D9E07D
7AF72B7D8CCDFDBF6F769797819FF1B248CC12451A8657C7F6B2EDD05C240E2A
DA6C6964AA2CB887CA376F47F82CE17F10010DFC8E364D7AA79FECBBAAD7206C
F162969E33002330F20A141AE91DDFE9B58ECB933999058F6E2A4F1DF7909A17
EB7D4E797384C065B05191DF1F8CBA41CB481265CFB96D2F698EB6543A2043DA
43D7F7B17D4C878880A0D3F990CCBDAAADCC751EB90FA7E46B89E02CD49AAE57
3EAA4632A9CD8B3DB6684096A4CBFE93393EB5701843619F9B7E8CDF42725A12
F57EE049C2B58E08A49D6BF57EAF8C4EB90C27B8EA148FD4AC75BE5957C83BBD
4A8089E24B2A2EF1C211D8ADA7A0284E3137D99BB028CA8F31351670735C3332
F56D9B51517B23161C26E1C728AE47340EF596AFAB4D46F159410B279F2AD211
0BDC09FBA6A9B12CE12D8117045D4D7676A414327C0E92293A13DF940ADD74BE
BABF97FE30EE7A131C5F33388108710C9AF6544C3EBA3E4A1DA296EBAC58F04B
9719CE8C5083254302ADB185EB920AEAA51690ED91AE561CD33F0C2AE832DB15
B452C2D11115EE269630F463AB46F700E40F0CEFAE20F47BED69068FF2FEE041
21549ECE331219DA6D49DEBAFE9B4DB554B1CD3A2B4673838CF7DF4E1C86EAC0
1E6654D321C69A8392BE65627F1F7390C3DA88B7A3316D80449BE4B00E35C5C5
517F46676EF580372396B9E1434D6CCA0935D85BE4A802D617A56F7E32F72DA9
00A98009759F0ABE76C6E29B451CC0E8E11047BC19E8F9D300720E2BFC847236
3C158F4175D59DF911DB5E9D83C672F107F04B22137D76956FB4730DC15BA6E5
844BE1957E048132AD5C5D85F470A8BFE5BF8463E2DEF7A1B3BFB7DC93FEB703
080389CD7CE45451E9291D5F43290EE7D0B6EC73D8ED546B69C131ABF9B400C3
E35E00D5031CE9A60530FA25D23B1AE1DF83D7B186BFB1C5A5059D277B0C5DD7
4BE25A3EB68C1936059511BE4E71DA55D69D8B352F0479C66EEF925865F8AC4F
2EE83D6A9639E7831CE348EB86595C21BD2AE67867EB770EF325A2A6C62F675A
4B98C6F148D4FE2D904CC7D4D99942AD8C853E016923DCE6E2D3E37135F1A084
66F2FDAD678AE91C043992646EA49DD0C90F5774BD2D4BD7D1AB7EBBEA13C30B
30786B114EE23275B179B6648A351A3A1A477D49863DB5D7FFA4D0D4CE9FA6F5
53F67689131DBD994541F037CA06CDCF85837BD641DA82E4E6767F9C40BE7437
4777545ED0E7BE8693392C4D6EB3EC3108D1448D70444D8D5EC423985F63F712
1EAA2E54032388C192769DB61CBC9D579A135383441CAFD383BB034562B922AB
5A208E8082CBEC8EF5448C195A880F3DC32DF5542F87AF10A36B7953F1DF8C7E
7DB3A5340876C0FE6F2BC0ADAF8EBFE96AE38E491734C193232C418B1CD15A0D
4EAC1739DD21ABE7CAC479C9EE63952950AE48C2515FC6A44FB792D4D6540F36
A53CD9D6F0119FC6F2B6AB2F6548DE88B70E2AFF2AE4FDD091E920D6A936613F
00B543BBC79768D6D2F730A10ABB310B4D67B8738016EDC33C8C1941507830C8
9F8DE72DD3EFD9A1535515D8D5AB2C8A10B44BECFDD46E05F70B56F4D88601D0
6EB706EC2D659274B7954A90B8CC65A1240B2A90AEFA55A79FD772889A747605
8CC5F97F7A2ED2C173870FB01386C16A1803E59868A3BBA0556AF31859B5888C
952C9D17897C4EBFBA53E75B1FF9267300FE18D2362F14E3B5D4A7EEC422F075
D0A681CDB262BECC57E6B6DBF17CD9229E6497496F68C6C090320CCEF56D8F7F
D878ABB5FE3CBF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: HFBRSY10
%!PS-AdobeFont-1.0: HFBRSY10 0.6
%%Title: HFBRSY10
%%CreationDate: Fri Nov 22 09:23:42 2002
%%Creator: Harald Harders
%%DocumentSuppliedResources: font HFBRSY10
% Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/HFBRSY10 known{/HFBRSY10 findfont dup/UniqueID known{dup
/UniqueID get 4214393 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /HFBRSY10 def
/FontBBox [-30 -933 1117 775 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (0.6) readonly def
/Notice (Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de) readonly def
/FullName (Computer Modern Bright Math Symbols) readonly def
/FamilyName (Computer Modern Bright) readonly def
/Weight (Regular) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AC06351EB3A0C389A3D2B08C29F4C9FDB187846925F2B5
2AB2BD00094110ED80B925CD1B8DE5BCCAFD453E80FC63B3534FACBCD94AFD5F
4DC1E22D1E45DCBABE35C60DD1E371BF9BFA478F9EB5985B4803466A216678F6
D8097D0361CAF8C35F01B468ED715DA2C624DC4B7ED560BFDF6702CF2BFA999D
A55DF650943CF3633A742AEE2717980B72EB85CB113D30643DC2B4517A1C7D20
9DBB075BD73053334B99317BA21F3EB27C1BB371F9AAE2C78241A633725E5645
B5A0DE302356DA3C6243565EEC09189F9F616DC3D26E569180B058A84EE78330
12CF0D9979FA09AFFC01001D1750F464971FF09179E36F503EBCF39EBAC9515F
74ED4A8E3F5DB0C958049358444D7ABDE718D8FA4C201C1849F1997F2397FE6D
6045E4BE06A0EC9F80045DF5A616B3680184BD31AD9C6677102B6FA3B947EEA8
03D809EB13970F0E5FDDBA29205FB50C727011D9C86C3266BCA400878BDBD73B
C861715E1ED15198004557B4F71EE22F61394942D7F595F3F01BD340D531B65B
1A9DB240027F76941B8C98828F5057C92F931E0C60848B3BD99DBEFD3A1745CB
58159E6B2B404234554570C76E1BBBDEE655A16BF4283D1DBF81C86533AA8C62
36A7C8540E02A214BE5FE765A2FF645CA743D7CE944CA337BBECE8E527CB866F
057FDD2D4A1F2FF3956EE0AD72AE8869CC364FC9520716556214ACB987F7C3DB
4819909689F9A57F50FBBE025486BBC2927C27D1B32EFC68F214A7ACBAA49014
40B9F8A9F0F3465CB5581D00A5FCFAC0A3E4608243460DC0696AE5F73EAD0F16
AD6BE13E4886F7799F7B0157812A995D6F4EA5343421F2792D0336E5BE974F4D
13E27CC27DA64761FC5B94EEA1FE4F6C0B642E5A562DACFDE349DBB58F7153CE
D71133AABBEFA1C44174D24E876D6F839C172FB878BF07CF71C5804FAD077CE4
46F9320A7D2DF9076CF0E82A89E893DCFF75D67FB4D31C480E260417E57A71F8
EE5993434F656B91A5045C22677DCCA2E699D20A48004296C0B983DC344A5283
E91629D9A84B36A281975D423A3FD334FAA1B3A26DBB4F3BD95D810FFDA5355A
3D3C89C46F7BA89CF567FCF05F31EB14356AB76B6B7D6822F9FD61B9BAC781BA
F7CBDBC8D72CD0D0E71E762F8BF0F43C8E6AB93B71886618B070D62AA97F9739
85F5F5416EC63F204CBFF89030D9F51B30B8B8EC408E7DAE2DAF900B8433100F
75A7DC39EAC75908A019533F5EAED42313D932C2F9E571261948DBA7FA2D5DB4
753110DB4AAD6701E87D63F193772D833034F4C033C768E2D3BD7A90D8C11CA6
BF718FB9B6A3BC25AEDBDB2EFE98DCC843881F129FE829EE639F65CC96F9F193
B263264D3D1510A49BB57170CABF7BADE609425251FBECA70B92649C40736C1A
75F76BA165CA708EEBDBEDDEC9A6AE1E9534AD219E7399E3DD01090A40133C8B
E9CF9D30C5D3C59E258BA447C2845DDDE0E77283968C7008056A3E89BAD059C6
3B08811F158430FB8E9B975A25B63F479EE9D1E661B723E8C60D5B639A0D9C10
A37474212FCDDA1AF23021C886964F4ACCCF1F038EB77BEA50A6784DBF9C9A6E
54B1599CB56071945DD8A5A78F8A6C00C9D9EA668D8D8DA57B4A8659E4B05B8C
632136CDB2BEAE2D929B4886278FE141ED6119A316E022946608BEB0BE34E45D
860501F5CB27F361B81B9CCED5852585EDF4D5D0A7F2CE85C100C7CA86663BCB
533DA5DD3CF197131180977E65DE926F3F0AA846D60C893957B2E8F485D473F0
991874FF8D1A0EE43F0C0B9008494F0C756B1EE19B1C4F1957405B11616B2433
AE9DEFE7FCAEE47D396033487F2C0FD250DEBBA089617C15EABD9A64DF3D5252
9F65583F1D7D3B51CDD2766823D9A004FB26943DA7E02160CB844AAC6479690F
1B34851A2158851388EC86783B86D8FDE3E9658CBEB52A98D3C4156DDE3C5E05
F7EC25103C29C3C73E377086E8EDE8468704B8A31A5DD62767EFA1620922AB7F
01FB162D5D0D16AD9B837A68FEC8E4C8DF9A63B06F8B74E511412DC60AF53E07
A8EACAFC4047173232826DC339EF3659A94BC14CFFCF574647F28FB6C3FD29E0
0AC5E268E181E378EEF9479B9226F1CF630A3C9E43C03A252C9A07968B6F99ED
6BB775C67B5883E69E051D193942A0C9F3FA3DC717F5B5B8F884142529CE278E
A4C794E2065E30AB1D47E256BA8940371F130799C8D264D95C476F961075C115
8814F2439CDFF9099EEB811ACB4A6A0A07F06D7A7F9FC0F0065E0FB58675A365
98FF488FB9D063942C5E89C9888C2776B329C0DD303CF11A13FA09CCCF986F4C
A9146FAFBC36B14DAF84EA138A6E3DD99A8DDB4083D2A5CCD609E3658CAF79A4
A279319FBF212EE60F4B182C249E25DB454EA592C3279658448506B7C47B95BE
C31A1010574EA712397CD45E8F8D1DB44364DE7934D85C6F059C150CF354020D
48B889CF668644F1279B6C2D507A4A307603A3767A94A2012A79BF9E134A75A5
E217D6C7C4880F06880F2A340AD3DF0B3005BF2B804DA18047E5CF033BFD7DF9
F08E41F3959FF7A2E931648804971548338B85EF6F2EF3A6CE2C966E0D634C7C
B6D4C90F9F4DA8092E34BDA477CD9F47D84EC7AC98FDD0D2AA4066F312D2F99E
E531744BCFCDDA53CCA87EF2160E46C5A3BEBE8EB51498D48D4391D49F8ABB52
C07529AC10FCC547479CDAD6BE91631090CEEFB370D06AB4108E00BB5867959C
264D393C92C918BE4E075FD26B574F39893E381A2A653290FA3300B3F23D21E6
327E23DC69E66F95DA53CE57D81E8E87D11D50B231085704FE06E701DFF0BEAA
0C154E10836EE41450A5485B520E0A99F257CABB732824D33768ABD917363021
DC112A8D1A58725ED97990A5E053D9B850AFD9D8727A385864695638AE17A3C0
ED20F87555E4AC1C1CC8ACB234DCAEF25263C2BB0600FC084556BC4E5E51C971
D8FB09EDD2830A6477CFC0B654C709C2313A3310446E137F42EC069E3444D040
4F30E14CF03A80BC60AB602303D99E748377204D09D35AED0EE4495308C95CB1
A92C16F13498B2DC0EDD74DA17A79B656ABD2B695C3D10CA2385E9CBCA858232
5DE3B0CD594CC33D7F266A9A94E86140990B49B32DD325E0459D72BB92E56534
D78ED70FD20E32D8B37496C02D6AD0B6A6E3DCD653408C131A26A63F4DE0083A
CB0BDC262C80298E3DF80E2E26C6574DE1B62106B0B1D4FEABB0CB6A5276FC1A
1EEB68532565B6456A3AE58D6F2AD9EAE1BDA3B881659DCD15ABAB6F06527529
2F0DCADE328AD57213B013396FAF3B81857B938E19A3E8358E7E78723A3E6873
F21DE4AD82EB68274A2E593B66121C804052E160564B774C4DB28FB9AB8E531E
BA20B2F7F2F2E4999833E77DED8F07DE8BEC19E675AE50CEAA8FC5C4E6E8974F
E387E3EF400BC3305C37F3E88C02CF0795429415DC2E6972080D4F8E392D11BF
C05338496503336801664156E49F7AC35A6433D7F977A86ACDB4D7866DB52EF8
F258951F17027C529033141E1B7EA406A67EB25B4CACA2F9BD1EC6EF84CA1DF0
E7D6E8B112C11C21EC6822203983EEA00EF70FA8031193BEFF400CBB356B1600
BB0142D5259C2FCC8936EB1201FAEFFCFF2F9A14138B4E4240B5243331C1FE46
628288A7E43B1FDFBC0F756DAEA910E45AF789223BA7DB6B8CA954161FBA9A79
DBEF4BF928606D25E3E4938D156DC142C82C957AF6C578C561184AE1C3BCCA63
AAD92EC9E70D5383D5E3C21C65CFF7FEF4F134715BD9AF6567611C13E932F211
85D90EDC5C03481365CE6D5325EA09078D1BE1C5DD1DDEA4B04FDE4D7C66DAD2
30F79B06AE592F24F1F30FB7AAEE151E286274E78CA46A20B5046A1C9FEA8E0D
064A38FCF06C480832142C158024D7C482ABF903ED2233DC9AC1D26F4FCB7413
7AE4BB5C4D62C206A3A38C98C1A56D9AD6191BAB398D5BE4CAF9AB1D16F82A87
CFE21F7D4807655ABBBA6E23F715C59F1AD52932995272F01AE7B4D8BF88F86B
2A7286138D5E13A6CF20838C0A9E83F09D0B15EA6DB9F2F723D119A0BA2946A0
C5E1D3F1D625C5A9F3DF150A4F7123AD484DF8DC8250986A9047D859C9AD85B4
94CCEA87D291DEC1A823B55457BAEA5838ECFC91A90479824813D10FDEB14C22
E58E845F3558FA50320E1A87AFD72E899A10A2E0EC0AEF121E6D8814EA0126BA
173E96DF3B717066E453211966F7B696A9F5CE88E44943AFB5306B4D79577972
E9BAB8F7D7C6065C5B457426873FB72E1DAF1CF3B66FC0A16F52A79FFB570037
48C7B672140B2FBC1AB297834F01E64F4BA2D69A38046FC2215E8D3992958F78
2323D7D501BC8F9C5112A457139CE02E6612AD58B2A12A05C410BEAB801E1F9A
A48A1CA85E57A7B85F4AEAAD8C0320552331B68AF7CEB7B30025AEFD4792E33B
2A99F8B179514A91121138760C350B8D93A831A359AD3DD163F0B12FEB004A2B
7AE6A5DE0E783D4C6647392A67C8CAA0CF0A807D8947D5B903A0C7287F082133
0D1B362390EB2BA56441CBD9A5D7229FEC50F2B40BFA95A27B08DED2CE351BEB
CCA3A88FE2A1A0628D014710BA56B094F733AA7543E7FE1155B0A1EBA1FD55C7
C5556FF77AC4C8D1D6A81458BFE1A05EE51DCDCD40E3BEDB52E22AC1CE9034A5
B6029FB568813246F9DCC4EAD90691E3001AEEC18CFA223DBBA0A8571BBE229B
7024BEFA6A7C4B0682411CEBCAB0048A75F514D8FC46FF66D88F844006DF7589
58F18088B2200B16827EE0A0409E344799F29E9C8BE6FDECAE77CBFDE4A1895E
E0343AC4C1C93D71C717048E0BED79E23F52FDB84C58C6350BF589AA2CEFB240
00557DA2F98AB3D90BD5B07C3F4DEF964BD92C22BFE6E5CF9F7E007574DE25AE
0297949BA9ABB267555699B019E75ADE4DC665F0D3A38CC1577A407D073A5E48
1509E421B159CE3712059E1ED54A61D47485CEC3BF822EBEC1EB0A78692D9540
86CE1F61D0FB7F87DB0C0AC8DFAAE799F9A26ED03D2E8DB68C471C2CD9C7DD9D
A7630B6211AE74D5F16992FA6E0EFF348C8EB23B8E2031A40FC88FDA8B6F4F2B
D733276AB761C4BC18D2EF1D721D6B382DE1F939CADA436BE0E30C30BCF2D3BA
A38945354AC0852BA28E6ECD35B3255F6EE5B0DFE1D3FDB0CC3927F5E3EE58AB
4E1B46E3A3E257034B3E0F82F4203CA4CFAE6734A1EB5CB98BBB338D0B9719E8
FEEEF964C24243A051EEE50C87CF27A190423EC8295CFA008E0BA26458C9C623
2B9C15984CD97B0D3439341FB468B81DC0E55980DFFD48F8E86F06C04D644896
A2301C2F43ADD86F8B1D0F4E78ECB5CCF95CC4E71B3EAB69347C90B9EB53EF73
9E7E58CA4CA61E07171B98B13B0D2C428D6D4AC87D627ABD316AFA171FE49152
8FB17DD5716AEEAD2AFB7620E88D5B5D5A6475CBF057D78E43A0DEFC49C6640A
7FA8A0BA149C9D689F8F625EFAF5847ED6AB2AC304BFF4CB07BE12CF585C5537
444664D30C026FF534EED7288D3C0AAC8005EA3F1E2A374AF9844A2886F5E966
D3A0DF23861A6B43B07C74E63537D82E25565DB32544E356B033AAEEB9093D23
FD1B40B0957FD216A71B44266EAAB4FAA06A4C9C78DDAA606F635C993AFCC728
E530EE1463B75885CDF80C39EF2A71597C6E19810440F44A04DF72A396294848
D81DA3E80492A6B671EF6826A700CAAAAF34353A15DDFB7C3556261A63C179CC
55C7AA58B24958CCDF01C96AB875880D95904929D10C162A4F24F31012A6BD44
44E21452FE85ABD4528B7D1D2F7137F20268C985F50AA74751F51FC9D7F19DB1
E18C1FA1CC02083FE7E955F172F2AD521BA4B240A636B56B6C04C9A692EF378D
236CB1DC0EB2F6352599C794F721BEBBAD4F091F65BD8CA41FD725F4EA647507
173620F28D3104CA062EE28EA46012F45749E091C90ADB81C2D9FD2A8A21ED01
AF6DE7C1C3E6CBD3C953ACCD525A149DFA7D28D6927EF177DC32A3EF6E801EAC
02C54F1997B209A99B4D798C51464A6A2F04531115269CFAB2D12E943CF9601C
121A138551C6CFCAD42F0DC23DA4815E6A84300445A5F22F7B5E85E0DE3ADFB6
6E2972F4D573DBB48A6739227F4CAD55CABC0D5A7352ADB3874B816C0F4D975E
49FC5D11F77503B8B1C6633347F8807C581544575C81A4322A6013721A8A8B8A
4FF498D82E60EBE5417D8A4F26C5896CD2EA5AF8D721A3C6A9DEFBB670C711B1
A8FF36D4D23312B5B5C3CD5C2432BDD74F36E9A80EC982C34AE71D81091D928E
04C651958F1101D211038B099EC2311F7D7B8B55AD34D8EAE544BC5C0948003F
C6FA8E7A0E6AB39F85D82113ABD83A5698888273DF8A13FF22BE35AA470A339C
6B1F193B114C3213A314F33CFAE0F8CD0342DDD17FAE2552B478A9FC5CFA475C
627525F1F9B9572245EE1ED1A027B27DEE26EFCDD2E1E9BADE3AED4EE9383CA8
E60216955135DCD529B3D4B6313BA68C71593D934D392EC79AA034DB63446945
CD81DE66CBCA4110D1F819795F2519D949E5B530FD668D1711EBD7B1CEEAEA4A
89A7C9196F558A37B99CB6D7AAA3EE2407EFB598AB799611F9A5309E2996D1F3
0C91BA8331A5E445A23461D4B9A2A05B1AC0B3737D805064CE91AA02BA90AD4E
0A1B94DE44D32E130C805CDC1A408045CF2F7A039637E00FF495C48607C78E07
599AC81904CFAB920FB6681BDA00FF985C6EFC0F3F41A28C7456578A4D3927AF
AD17FB28CE17FD10C133766323C13111ACD748B0936CAC686C6A8A1529BE147F
1CEE3C6E3A9A979B88CEA35A8E28A01D0944864B5C60F6D541DD53C006A5AD5C
54A214DA00B2EFEEDC79CCBCA09B303407A34D2F27B0AC5CF9CD0CC5324D667F
D7C0A368ED4FD09A79E82CB0EB20A37922285B2D9CAF5E37E86D918F65A2FF3E
227DD1AB8FD61F139D958BBF0E621AB7BB35A3D545B24074B8C77C5FCFA1385B
881D12CDAE74C53156D092F1A971E740CBBE5C8AC34F0DE017885A6845127F40
2AA06652A09F926D0A5059AC7D0A6146FF49EDA2D742F8C83E733C1779AB236B
D5B2E75E8E105391146840F1C3E9D0C3807358BB10A6F3C7FDB73DE8CD081B1B
FF8DA0E6E35EECF7D0B6B797D96C8E3A2AAF6259950AEB94BDBE2329A1FB2BCB
A2C432898BDB71A109AE470CA37FFFCAAB3877E4C1F44F97FD223E0D51B495E2
87081166E43B665FFB903E3689222B71BF427849E6D25084EF7CDD80878A0305
F898B7CCED2374099E81B67BB255A1A8D73C59B7F30FD97D38B13B76570E7C13
7B60A6EC7E44F0A807375619BEB450E456B409F7C6085BA2874E038AF1B7B7B5
DCDDFAD3181488A8DB4F3179FFB47220A737EECF99EF3B73B87A9E2CD5EA2638
8CB4294C13D666C3E9FB48FB954363F0A7E9944F93B27997ECD296387A98E980
3FB46E168665BAFF7744201225F1902141DA11C62DAE39553A7A28CAFCF58572
F03EEB1D709DAFA880DB7B200FF83176006D7F62A750D7DE8C1E7EC3DCE7AC47
3DD63C5C50D28A9C8CDA3229B4A495B65F8A219B61B09C0FF0A4E00FCA622298
36A7199E8F0D3595D25551308FC89686E252E8580D4AC3520A32C22925AE95C1
C4DD55BB8EC79701BB35995950CB00A56904D6E021EF551CF51DC02F86DDE919
FDB952BA6BF56D3DC8C4527837DBA4C9362684651B9D5B09C17883D35CA9E4AF
287350B03762E19C392666F488822C5F8D2F556EA35114D0B8D5DBFA2F1CA5C3
8629390622627FCB5A20730A4DA7E6EA76D91F45AC22819D838D580A26C51614
CCC4AB646486F07FBA10C2EF19C167EEA8740971713C9EB53DEFD95B44A00051
F955502C90EA0AE50D61BF19E665F7B0B1C9269A6E1BAF8A1E6F9F07DF237FD8
C4A1AE072D1E66EA6A8945A42010D14402EBEDFF0B144B1C9BD22D737954CFC2
969B1167135C7417CFC430FE7C8016B3ECBC8577C2A05B4D68FFA0100BF564B3
DB31B4D44457D2C05DE5DBADDAE7385F40448804C7541E7517809965A4691664
E373B5C24B3EB36CB7D5F86AB267E1CF113AA4E475B8D83F6BAC2D60811DE692
71977AF44308CC4D9788C0E3CB5664C60D8E524A15FD6DA78345A96B2BAFC3B0
048647DD26E13D6CDDB49C4A6C11E5F309537197F419E6722DF01EF3C88BBA1F
CFFAC090CECC8F39B64379313F142FB8EC2384C3A178796E87DF54C112D7813F
7271A5474438A7CC380735F029CAD734EFC0B94C4A58600D51FB4D89FA797068
AB8EE040F4BE6FB515312A345FF18B169B121155CC018462884A1692AC598ED1
6C47D16F57DA03E70605C643EEDDBE9C697C5D32A76F096ECAAFC065535AB32B
2E7405713A9B31042BB5A1A3B74395F8AD7A723EC106529828D6CEDCBECA38F7
FAE8C1363A6CBD8AF8B8B9D1F730416FC7940668F722EFB7E8ECCE37D4138087
D9C6A93A6C0E4A2AE7B930B69005A3A2C1225FF0F378D08E56B987062BB57237
BBB3056A36E97E399A791E71AB4D0073D71DC38239BC688D3F5F61CB43AE2A57
2775ED9ACBD9A9F11070BE452B7541ABA3802CAB0C3CC77027D8A3C0A06A48BC
CDF5D6D6770402B4F44265048F2AE84F226220DFBA0FBA985D136415D0F742D5
70A744863FD8EA705890890AC5BC2F0A068C72B917BDE539B8BF0673882164FF
2F57FE5DDAEF20AD718ACE5C18720E3E3C72B08FB19807710498752E1B190FD8
62092C5D24CE3B8037AC8FDD3EA6878346882EB5592535E911EB0BF8D1884589
3F59221410C1727F19AAC361613A028572D68AB9D20F3ED4130D20D9FCC855B1
2516816675EF30C31A49FC51C058073F50E9C30475DEF8FAEC6DA2020F11D0E4
9CA2A7579C6C953E21A4D7A77CD78605CDA98564E9D72EEE952023326B44F5EA
5E31B2483D01113B2BD7AD0D11AA64DFD2AD7F508215D6B59D691CD14C8650AD
20A77AB23CABA052E588354EE7E2F89C2ACFC08CBD86615AB5A60F794B37C95D
D65D4F0F6A3323EA40EC26E57D422C074B3CFC41DE46C7FD64AABDAB32B041F8
A0477D201123BE9F3C493B8D386052B422FC6A7D84B8B804EF216233711032C2
BC229D1CAD4F5A023C96DFA8F4B455EF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: HFBR17
%!PS-AdobeFont-1.0: HFBR17 0.6
%%Title: HFBR17
%%CreationDate: Fri Nov 22 09:14:05 2002
%%Creator: Harald Harders
%%DocumentSuppliedResources: font HFBR17
% Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/HFBR17 known{/HFBR17 findfont dup/UniqueID known{dup
/UniqueID get 4214379 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /HFBR17 def
/FontBBox [-94 -223 1033 751 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (0.6) readonly def
/Notice (Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de) readonly def
/FullName (Computer Modern Bright) readonly def
/FamilyName (Computer Modern Bright) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /Gamma put
dup 22 /macron put
dup 40 /parenleft put
dup 41 /parenright put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
dup 80 /P put
dup 83 /S put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AC06351EB3A0C388F7EDE3D9D355D9933DBEDDB5162DB2
E065C95E6D27BCABD3175EE1CE0E7E7C00571B5081E595D70C9CF1647EB0F53F
7298F407369B5B2256D99F3ACE73EA11EA8AEF444CC2B95AA8888CDDD54FAA38
349925414B53EBA844547DF4B6776B552C3A8A5E1051C9F8E9F2B66BB6A3061F
C0282C9E8CD03BA95B247F97135B16F1DAB3994CDDECEE9403F580D1969A0025
2F08C474B8150138DB8F140497B4A122FCFB523704946387C7914A41EEA71C35
648B00901FA34CDAB06B619384C4F526934C7C2A91AAC85CC609810F03D9496B
5BD6C447F90FDAA51F707015B02ECAE583744C6B0964C52972FF281B80F5F451
087788C8E189137109B84FAB4F6E04CE7022179B1E9CF6FE559C6D55BF47B916
25B27368C4551690821829E126E57EC510BB502E5D3D25F50CDC819787F40120
C3D711B1BD0209A7ABE581DFDCDFD04ABF3F0DA4F415ECD1EC832117A68D5D6B
3B3B0818DAEE02D3ADEC95240A5502E4954CEBBB8E661393B930B84A4245D041
6C6753290997847BFFFBCF81533E6C8B288D3461D538B14967C0F52D2FB2614A
2888141874D4CA026CC702ADF32D6B1AB373BE26E78C1980601C038F348E0986
F3F4100046BD27AE131BF12CD2D796EF9737DCC250869941E5BF61CC4E39C8D8
C7B4492BBAA245A69AB37F22ACEDF09CEBAE8DEC16B1001A4FACC855FAF32182
7A1F05C43CAC6F7EA517D9C60616AECE2BD516C03E0F58061A6238F27BED11C8
72616435449EFCBD1ED05BA4029078C005AE5200890DCE632709729B2FEB015B
9344BC296D740FF889CBB5D7FDBDA6DA578660E98E8446E6C56147D917CC6CB0
7A4E36951BE65362AD44678B339B70B405F0B3471A26A1125500A3FFCDC35F4D
3C6C27A5E56E8ADD6E7F82E269B8DF5AC490A9CDD2F9FDE51054CE4628A1E920
D5520CEACB67AC9A4CA3EC448A6EB0FD22136D84749F2C95F3B60B2051E2A962
5684D860C18449E23F63449A10FDCBE4404FC1E1FBE6B4535E05FD3624FF13AA
842A8BF341C9C175AB010CF3F19ED92296988F007661A366BA039100AC61BEA2
CF469C466CAA8D6DDEB5DEDC6B65CE7E2E3A2773D105E04AC8D82CE73DAD64AC
095446093002BFCE70619136121D6C48A9B1D12BE160061ED533E438095CB89F
68C9B792C7C67035A92CE145E3E9E5799F785B7BA091088A3498B0E1130F7104
7283C2E4F25E261C9F7843A3D01D4112F3060255C86F40E83FDF8B484BDD3433
5B4F9566E6946D364C6432F130D6A1C170C88801FD2F3569C8CB6AC9631F3080
356808CAB09B3E1808130B28ABEB3D6D65B2A1F61B11D8AC23553B2441E107F7
C2FFF7F0D500812A62720DCA1E6AA9A4F3E7CF50FD35317B850E71A8B57228D3
CE502BF49DA49403BEE7BE296D21BF02697C0A8231D28E8D575F6FFDB4009F6B
C1809757AE518EB634A08934BD216B2CC68F8665723AB892B0998AF9F9E27381
AC0BF6E95D173F88AB770E872B10390480218546925AE0197B8EAA71EE7496F2
B029972C73FE2F09C0D47014F04BC8847046D87BE850F05FB53DBD32E2A48F7E
679CEFECAB1281AA88A82A9D264D6A55043F44D1AF2F788D120D41C1D2E6CA8F
C4217BD0C947E3357519558D2DB6E10F552D8251DBB7F9ADBF5E7ED15F01465B
3AF50356765277B629FA25BD8031888D9602BEC7DE105CE5181F2351811FE012
0BEBE1AD8A36058C2E86C4EFF720819F67E929F1B96E09DFBA8D9BADF023FBC0
31691B4DA9809F36BB7012622DB3C19A06A448F1A2A7B59FF3D0F31E4A68C9D8
D3AE952BA1590903BCCDC2090E15D5FC15748BC6BFC3708C798727EAFE8BFF01
5F8A2FF4BE1EC70321D7214FBBFC4B87AF04EB5519FDD12973D0BE06E4D9B72B
E518F358841D15F962EA2DD07FED784FB9D24A2F35D3859304677B36A5091D14
90CAFFEF699FC3B77AB798355F8E986A16FC63F315D741CD04EA3DB40C01F48A
8447083E979D7BD1417721BD45B540699FC9C214DF55DF577EF7A9517F7F6FC7
4BA773010F2DE5E74EF257309F7AD43D7C97CE9C096849D9669BB3207188AA1A
9D3EE592E4406523F2998487F9CE5876D4B955D7FA52A0A7F28A785EB427FF1C
56D32224623D322A81E8A5E355521FFF35531F5B3D94CE044A5586901B421C4C
3629142C8D45877865215298895A1E253F959ADBCC9F274220F9DEEB46B59116
16561A612960F4D27AB6AF9E76EEA91789DD205EEDF187532CE89D3F1FC13C77
D7A3C568E43BCA7838F0114A75CD97852D553EAC112F5B10A7C4E36755775CFE
3FA6B73C6D8DFEC8B862CCBA1482708B0A1300DFF338D18403B0D32B490CCA0F
2AB02642665961BE89B3388CAAE13B9F38F698595E1938DA9804980CCB41AB46
D767C5FD8EEEB8E7D234BCBAE74B248394E5DC0215BF40D6E4849F0CE7F979BD
20EE59E64E6BA6ED387C94D690BA572AA28C49C61E8C48B87CC637D0DFA3ECA2
7DDFEDE77491D45FB0F60CE186634FC24745A46C209CA0DD1C752FD256E593DA
4D0D70338869F56B2EFB1E02FC53C8FF43BC614C10A44BFFD1164750A7E95825
D50C75E8172C8EFB1E5A408243DA9B276172D2C46B0D41B616D8BE28D215A6ED
AFA6A3425430DE28BD69E05949E4CEBE6F6A944A130DE968827E8917F720363A
88A9876A070123EAA39350DD393948217433D809D2C7C4FEDBE462F0165D2938
F24D89B9EA9D7AD4E80B6BFC10D56CAD742E3A4E2124BB7807A03A50CAA1C874
E94919099CC05BA581120D5374A25A9C8EF3C05B98AEF772FD5920A930FEF210
6BF2C25AD81ABCA60305FF826246297DF366FD4A9E6BCB371E128C50D57B5B60
CA3A75336EF244ECBC30830422A9F2B546C41C385BCA1EB2F5849C411A6AC641
DA24E8E3278B1C8F468158673D609932BAD47DE672B456136DDFB48305FA47E7
10C9346A964084D6B5FF04E8D05B1AD74A52CA3A40E74393CE2F3307C26214BE
830A143D9BDFC988320A15C8F49EFA91EB025044824BC882B592BAFA186469D6
3638C9C2E7FAC818DF24038C7DF8773810363633F9564C1E2C9D51C70A39679F
49951EC65267A32F95142810C1B0EC2B794669C280D5789166BF3F9916872D29
3F50E2102B435493B0B726C9BFFB996453DE513E1EDA1F8BB3442BACD8DCBAE4
3D09BB0D5D806E1FEEA118EACE8D6F71C290FA0D800FE75C822B126146943463
ECD07D8D522AF900D44EEA6FCBB66C5745F4B499C7306AA8A7FE2D05E5C0021F
A7F9B09CD58109D6FD9D9DE483B2FDF0B8FE744F66F92379E0860C35CCFD96EC
9DCC10B4CD58EC6F7586149685B242289CB6CED7CA847BAE4A4A94C9A06F1218
46554216ECB8AF2F40BBA94069B56976E697532F38850901F6CB4293B1F12A30
A9773B700855C6A2051C3F274AECDDDC62994D5D9765F70424F232E9C3EEF449
FEF50A059A37308680AFA3269DBEF281B1FAF2D0DFB67611272A222C9AB86044
87C30309DE030E90CE7D1EEFE21ED849C23D34F456F8195ED8ED363BC169BACE
149664C7EB6F76F7CB6FFCFF621B241CB320302279006DC8193093B5B0577BBB
622629A5C2C8B3BF5553E46A17C821056C9E01805B8EAF79864C12A3C32FA647
19D02290C8E54C15CB108FD05C192269E82120F25D0FA35461BACD87FF11FE66
5652131E9BACDC3BEDAE45AEA5AB50964ECE536550806FBCBD6EF924997EB6FA
92F450F153122862429AC7FE6D6C758C8E23BB48167270DED69536B9C4BC601E
6D32180EB06F50CD9DB7E703C99A3B7C21E22E7BBFEA40DB5D3B27F2E3677E25
7AE23ED678780824D86FBDE64637AB2D22F8BB5432F04531BCF1F720D5BB2F4A
AB7C0583FED810F871A1433C41234AEB79C3A7D8DFC370DB9A001370CAED3B3D
6FB0D6BFE8327B9FA964E88824F0948EC8B8B55B2DCBB7F66F873548FBEDD20A
2E4B9380DAFA1769E0F7BB4CA1DA466A2BB32A26966C74476CBDF6062A987771
96FA7D77F55815C8C02E3B18F74DED56A93560E70D0EFFDDE6B8F0561529EA30
83ACB01FBDA6937697899AF813F87FAEB3C2303602FF99ECB54820325046F076
D550F8B12FD6EF41EB595FF2D9D21F402B257A7EDF489685C0AA021AA8F9DDBE
E2F3D4B1C79EC1B8991A08302B50DAB1A126DAB17B1F5898AFF3D0F482C5B286
510301A965A811ADCD0629676BF2153F2BE06BBD89CFD73980B5DCB6DF0B0C80
DE2A649AF64CC186AD241201F7C249CBAA7CC5CE84C5DF32F27B0F23E33DEA58
9CAEDB581883BA6BB13C5763B0E72D099960E7B919A1D1E5B0A19FFF54D28050
5BC35CB1E48BADE53A0606A47FAF4F40B697BC83191F20AD2C1825BFD6456EEB
D1D8FFDE3D6D99ACB1509DB64B4755D4650B967F299FBC083A7216A9D7C8065A
48AAFDC4DACA5ACC0164667F12E4001CFEF502BCEE4BE73BFB98CC186D226BA6
A2A0F2100B2EBA9EAB858CE982903E1432881FBA6BF3A654B3AA235E92AE8D46
2F66E4EC48361ADED61E2B4BA8BE5A60CC92056F4724922B4D93EE1ECAD8B3EF
EA466D5CA0CFA03A28A7B8A20B53B1980357E446B2E1A2FA9019673FE9A00CDA
03A659D958E523269EFFDAE699CEC7DB3BA7F306F30101C36838220F20586162
3287FE3E914E8AE5FC07C3BE2AA29849E07832F3EC791402FAA03E723E92ED92
F504EA314188ED9E9B2299ED2868667533F44ACE999AAD09EC7FEE1BE0C66657
9D7CB12B10437DF77C0EBC4A8DA32265B1DD32B979BEE440A753F00BAB778ED7
0527E024BB93621522BE34C5E58B905586EA0C6A13AA0292913337847D46A30E
4B306844C7ADB682C3D2B88F78A88B9A7560BC32A865288FE5E8E881E9B4F634
6A6F106B2CC6DCD5AB54BECCEF2C46ADC25D54E92FA1C8D94F8D3BBB87C0040D
FFEA972ABBF5D42B9E31756579015508C29E2C44927478FE4A374EA3C9F2578B
A5117873861A0308ED0B74F14D65AFDE99B9252A190F95AED5FA9523A6445BF6
7BBC902B0B2A84DB96138FE7EE2F986A7B8CE9CD62E028020CE3C43EAE793087
8853FE37499320EFCF0AF65E2F62A6C9C91A97D9D97ACFD939502C400CE91891
D618FFE0ADCC54A5B1B947963E98335B65758855C061EA39BE0B43419985C499
B4656B6A83DE8572F6C63DAA93988945C0F3DE978A1E97DFF6685E24932C8B3A
D14BB1617542CCB6E265E270FEA2DB605D13F0CDFA37621D85A8DE4ED231DB0C
307CEF4391C4A98189CBFBD4F89DA1264D4CEE04B5C66D39F7907002B1BD853D
A64E27BDEBB2BFB259CFE36C42498D2B107B5AF139F8B429FDD5637AAA660AF8
869840DA9CDEBD70063054DF5516774AAE0AC6D572138F1322B64AE8CA2FEA50
11719B137D016AF46B4F2EA22733A097C5A305018F161F4C72696272196D624C
66DA1AA7C093124512D331AE1A48A758FEDC5EA066F6761C9336B808BCC8A27B
7CC1F8BDADDDA26E751AE27AB03A7E3FE21296C0D1D5630335E2A63135D32E82
E5692DFF48D51C70503900DECDF1516F95ECC1425692C2AC35B41B650A3337D4
4C90A9B06E8A64FD99C37EB496BFF127BB9388D11E687515911178266E49D48D
7A1A2ADB104DAE5EDCF7EE87390A7CE57D8AE66173A327D681CADA1F315194AB
D6ADBFF7156F95D2F3458AB8F4E07FF33C44F3C52FCAA99B5A1D11B72AE0780B
C0AA4B162C599C270D429C67AFCC4E78B33E973793C2AB02CBEA99243D10807E
D98A7D082A15A6021EE42BD8E77DC4249682B14B04F02229AB7A0E09A73D9E77
41B68234656B3226202C0F94FD916FDE12756CCD6886F5D61BD2580BE96EBCAC
F0CECA992773288CC329C1F1E71DED385A50EB9E8ADCD0DE83978657A379834A
7C2FF9FC63B86A07D32FC592466D61B463A51231567FC512C7A765484C6C2C92
C065BB918986A79F148C01C938034517F81E313CF4A8EBA40FC9021EE3A66FB4
034FC5A57D6BB6CFD514927B8DD9D03311A469FBEB7342B01BE83F223FDFF7B8
532042FB02B9C9EA74C7FD375D4E0BD0285DB7996C7C9B707D2BBD373D7A5206
341FDB08B822D5F5031EB4E5E17FBE63367B68B8ACBE3570C1D8CE854738FE8F
5759C908743188DC2F62158DBC3C10A0B8C017DD155FFB73077EE7C9E18A7DCC
29B3F53796638CB6AFB37D781D896FE2A3F9B9B33DAED767FC5861119DA26D6B
B2DB3E8700E288BFE9AE13D382795C27BFDB380AD6E6EC83AC6F78DC6858B31B
0F92E87BA1B8CDAA99DDED1CA41823DF8E35FF55EB4C5F69BA2B3BA6403D5579
6B8077406DE10470CB0E74249D56EE9DE5E945AACFACF4D0241141651E57ACF1
ED797DC16583BC5FA9A4B6F10A3DACE47CD20AE31A843C4E0355FC1FD993B340
AA1B2C917DFFFB977724AFF3B1B8884D88E7E9B42872C3206B2F3E5B37959300
13658335EC608B9EA05AD68D4E350BF9048CB5D8AF8E68D7DD038937B616F70F
63C97C372C34B87B3E010DBCD3DB4FF957C31793731F750A12F448F84BA54B79
76F6F1CF71DAE96F58FCC4EB9FB80A786D1842AFA83811AAC5475F885D1BAA68
167255D1A4471FFC2F4134C1D8009FFE8880902DB8A65D4C99A2420924FD55E0
8F3FC11D34A26E6873B491E6B18AADC11CF5ECE04A2A87FF454E6B8552887709
21600104E936C70DEF61442C997CF0C1057D495CD2E6890DAA9E422788DB3D99
BE5F0618A2D30B7AA15F768FD4A5110FF764E6AF2221878A77DB2112FF6C2860
8A711337682A19C178709C7443679225F69925610586EF914EB7C5D101C0FD1D
663D236EDED894B0B32E998FCEAFB163672E0C669DCD07F7FEFE9EFBB3C85507
5D5C89041F9E092D090669046F317B46EA64A8AB39B26DE70B2ED2C8D63AAE03
009E39867DF9CDBFCFEF977781E859A426B0A1D568C2BE097DA233C7C41AB0C2
4141BB2E01BB3E0730ABFCB0D6C50B09FB5AC55E47E99F8237E07C1CBF535676
A86300FC2F16205A0073AF60769399B2906430C8F60F7A5B95A7A06A404D397F
1BCCD9890BF4BD28BB0E00A36B9927A1B3CE937C2D444B89840FCF3C07ACA32A
7F2B574B0542AE4BAA9D79D0458738C56A80BDDBDB895339346A419F2E560F2C
28E3055F1F1585D02555A6DBEAC9DD11C5C77066D99F25E6934397154502A84E
43D90739AF819EE3B6241A13575879EB5BD3DEEF43785067ECE5016BF45C4CDE
BFE4806FEA0F4CB7F4005D3623835A90979576A710167746CC66340D7577F1AC
A2FEDA4BFBFA92699F977EE459041132911D1B85553BF5CA911A52B6C639F393
7C2C0689D7C08F9BA79A2F159CFEB2F65AA299E076295312A968B683D01AB692
33032D4B9A34EE00A7F91CF965ABA31F2A458B2FD6F0AE3B985A97EEDA78424E
6AD6B3ECFBD825A5369AAB6EBA67045CA1E377D243B29C2480EE80B36DED49B8
A2952586CC64B15CFF82D44F6350E10D345597BFECFA58FF527CA463010C00C3
CB719071EB99D5503675A378592A438932487AA91893DBCF75D4B3B2D7B8FD81
3AFCCE066BF28F73F5ECABA0E658E07BFD9A5A80BDF19A682166531A6CE74D9B
7129267C05F4AEB6B4F3FB66EAA788422952D1005DAAAB84B4F1C69857FF9D69
4B06EF3DD69BFE6A7ADF7AF05AF4A9F21421CD7982D77E83CDF905D1B8665730
0EF8D5C1DD86779435581370CCDBD90115793E0C606CEB24A581288C27D93329
10A62FC3E0C50F55A84EA4BA81D4C1FF1A9FD710CF61082DBD676430AB9A60F2
8F0C3297414ECD1FEF73532047FB1478F8554CC72457C3F28D3665B519CDB7E2
37083C3E79022B09D1ABEA44EA8828FB7DC79C3D06DB2442E31F4D770CEE6F28
6AA30E340C7AF07315209CFE3EA57E6C7811B7A83CE8D10D1E9B8A9DFD05C44C
457C2669807F31630BAEF06637586AF5185655D71592270DC46238DC0701B8A2
0B93FD8A6C6511665267B075C5D91DDA57023DFDF9ED71D4E41598D5D5938934
0D67B1EE8DBD49BC7317AC222D65C592DE9810EC5627944F56F08A0A7C58F795
071033711947B65B0C07BB7FE129E44CB9CE4FA973134372970A35FBF96123FB
ADF96FB821263B84FE05778A419576E82A56E760131E50759D7586758AAE0DB6
8A07DEF72DE86D4041A1AF04BBE507CAF450F44198BA633D8639980EA7B22089
247B9F42A5C44777DDAEFA56B27091598B2DFB77BC1215DD9BA7DDD0BA909EC9
9E655A0385F2CBDEE99868A3CB67BBFD73E0210C1A54B4468938EB51173E04AA
8610FD7A24E471DE8A603B1C32EA6C208D707D3760F03898BF653EB0FF18A376
FF6FDE547A4CD3C7D183BC24CEEC74AE271326689E007EF544C2324DD24A7CC4
2EA143CD7E8E17FCB8B4ED57D7C61B0C70972F86F670A851256F0DC437F527F4
AFBBE2E19A784B1D204DBBB6E949532D7DA349A085E5607A74938777E7AEEF4D
8F49C40F76B948F478C09DCFDA96F7CA93B7288B2491380B2F4F87646F6BA421
95316CB14F474E9D6CC7C8FBF86B398FECB416D63663F652DD43DAC6C32C9548
A6F7607A1F49CA66CB16D3D4607C9B6AB0B075C2BFCD5D3CE6C857D99DF783C8
95CBD15CA3930A5FE314E02D56E60B62165B529E52EAE86EB7E2DC73C347153B
9B9135A79D2898CBF7F29BEB8A88BE7913502E5684A8BF4031B2FF05CF3746A3
8F0A186733A8523992CBBF6DFDED8BDE4E6DDFAC484F2222BFD38455BA078A1A
500CB006AA6A7D46710FC60882E920EB1C184DA0C0396BB3AE8446D1FDD2FF4F
0ECBF3CF7E895CEA8918A69EE67899BFA6B3F0C9E232D6FC5389570C46AF3505
423EFDC21CAA28CC8AA680463BCC001CB36929605008F4EBF2D95DDF88969B41
28A52251DB3EBDFA8F59FFCA5E7FC82E2264BFB011B6C12327592F8B086ACDB8
60B1B84DB9BB300A869DE9837D710A56F1A2149B53BEA91A5C184A5BDE1E01D0
E78EC979866E4CA2F3528521C181533F440F31781482E6527D0E788F8B96F918
1ECE959BA7254DFED7A30C3CEE434832D290AAAFB6CA80087E819F936F6F3397
4F0312ACD16023FC59DFBB89736FFAF7704A4DD4E38CE7E9E4B0461550FA58FF
5381619E31F007BE4CC6C6CC16BA687D8385711C76F5CDD4EC5A431C46485D89
16D491301D6F8F9E8864D2E7440A64DACDEC9261524389E71CF05793397E53B0
2B22244FD50221D73D5AECB9A0B0D0BCF4999F3780DD65EE0692004E1D5BE7BA
35B34EB84BD59C8FC9005C544BC83CFC9BA584D93CEFED8768DABF7F2E4FCED4
7D16F4DD2391737A7AB1D63393DB4A3AADCA389CE1ACBF20AE2B7969EE4429EA
78920D62845D12F9A5A74A7F2AD8A587D7000E7DD9A2A4421D9EE36B4F0A77AA
BE0D00EA7E69E98992204D858E8F962C98D69EDD67A699A0A07AE6FA791748F2
8CBE526D90B974FFCD2827052604BCD1EAE63C2F867CD089808841FE81D39359
DB56F5C4CDDAF3A9F80AF982F9E5C60DB92E848A60F1E402B8AC8C6BC9D94AF9
998CD3328F0DC964B69994496219AB6FE2B6725D8ED179E00BA7D554394EC065
6E6EC0A1B0E60995CF6457CF0F50EE79759F72C08436876034870F575A2D7ECE
EA31B0DAF5638D8539C21AEB714781BBC95CF87741B9CE61C958091ABD7042D9
FC009B97AA3550629D383BDBBF27066BF4D00DAD8EDEA09CBAC8ED110F655D89
585536CF4136FC67E58D19D8317B77DCB33EA24FBEC25E048C243CC2162DFC77
07B2F728386871B2A9AF7097C516281509F85397339B1B853385B5877AA0BA47
B2BC02FC8254137F857E62B797953C4A221B9F5DD7642E1D26339B356D589FF2
393B2D8CD8E30878C0E59CA7C0F34527BCB8C28EC92A300C6CC87E60EF88A07D
1B886A186DB61E3F188D6AC5B305EF51FDD3AF35DAC6B6FC4FC833028129F4A0
85AD4D389DBF2F1390B0BC3D4CA333A505D4A774131984F174FBB0435C1BDC9A
D9DF4202E2B7CBAC84D53A4C7B12240FCE9D46398817BCF8DD14172A41C633A5
151638FC286905637F8B195E8C10A3A63EFDBE9EE1B200B2FE57C96E5555E25B
844C85FA1AD4EE364CBC27A16470E3079780C4F1FF32700925FC95FFD21D53C1
AF4EA059235B885B300116EB15AA2E9E2834ACF33375854CAA63B922592D4A08
D28366791849D1815DA28188F9D5C1BE2AB8FB1C600C9D121724620354241ADA
1B7037F97F4B33F6E5063ACBFB7DC3867C0284FBCCF9F597D94539A1633289C7
5E120C333FAB18AED9140F3294B351615C052FA2E4A610CB2928F25270C7D304
7BD6331F71A058DB2F887E53503D15BD5E392F1C4BD102BB2E08349FCD589B89
2FCC52E6B41481D94A181F7C7927130F75E37C55F479B2B0F84479B6CFE059D0
B6FF640C029D186B49B1580D2F400DEE96C02C8D0F610530EB58FD1AB9C2FE62
33A9B78268276EDE30150281873A845BE237B4E9FFEDD83A2AEC6C63A6372C8C
B0AAF51A8B294FE9CE50C2AD07036B1F638B5D3FC31BA5AC8C1F3622D1E6D30F
F07E8BC2166FD400B18405150BE39FCB35B3167B86A4F7E92A1A0966E1627401
DF267A84F15E971476EA0B809E9683AAF76E1C49406DE1B1589EF73A50FBDDC5
A99C89F8B7D53B796694FD1A7A6B6277FA0DE0D21125DD62A5829556F2CDC430
340E2D180EFA6A9DC950870C1B210533D4ECBF39B1A147CADE245A15182A64EA
37531B4E34E77D1E525E618A52EEB9225D9D043518B7D39A8A3C2261D14C2E29
D4D5497B8CA4F40DEE0E9ED0F8C29AF1EB055D047F45EFAC4F78A0399AD1358F
E790F73DE3F7316FC971C95F4B7B4F733682FD9D7E21B8EA324ED1EE4BDA9E62
A3D6CDAE4EA458E5E0EF796D2746B8418E3414F7E48E17B889D5750A6C5B8F19
1FA3F3F428F0281B43427D40C53CF3890C2EB073E791B2ED30263DF66C595C91
7D2215E3A5EA3CBF6AC7E84EDE695982AAB822C87530D410343524FFAE866995
D902E5CF42C98072BEF076C1F93ED58F35B70DE38337ABA7BC706F4BD844DB06
A31F7EEDF4F029371FB21D24B1164056B5F085E82C5F4C1F31924A657D14429A
348A997AEA15B74AA72C16429138A62353530E53F1B1952EE4664F62C0EF2C20
0EAF3A8DA69E8D568B85772031ED47C2C4E5FD7334F9385F0669D62B382CB66C
8A21B6DDCFF028205C5355B00E600507FAC9FB2C16EB58453529FBCEC1248393
202DCD35F2F94FF636FE615BBE0876F38B57E19938D276EC7D3BC3DE0D793B82
E38A436D5962FD2B9AAAA9A688B1268CBA5ECFED30096F8A9FF696E5705D7D73
3941AC078DEF8F8D8A7214274F0115F1CFD27B108504050639FAE4ED2310FDA4
A4CF190187CC55BBF8A612C11300E9A8CCE6ECFC0180210DE024014D2E5C218D
42592D69E3130CC9451D26427C23C17D29552730C6A3C5193C3084BB7E1C3989
7C262847DAAD9DB3A7531381217C9E076A77EB8E9D1AC7EE213B775AC2743E09
8882EF65EB9B270AEC71AED9831718DCE3E64F5D255076577644690FE4AE63C9
0244CE47BB77B83500D8CFCB90BEFA5AA7C1E8EA5509532850A0CF3367D45097
54204D52131697738AFCC08FD87EEC38018874D343393B22FA25B6097AB20725
01F24FEA291360456718C09CF3DEA48FD0DF2EB038D2039C5BCA0D955772935C
9BCA5F63E9FB196E747C7272C21E9EC1C4951CF649569FC86CB5AB25DB418AE9
70F3CAAB8A6A7FCCE9DE1C57344C65A40C9B8B11A0C4F01B86FD13C442FE5995
AF9A50D3770889D42AED20F44D890BDDB6E7496BFBC1167000D5057033E318DD
BEBCDF5A7EB877951F6FF4D707C09E81CE7978930212FA3B4671C00147A9D5A6
76B734A75027B72F28AAD8FF7F134836338B96CE0E07CA74976CEFFC34AA026D
DB12D16A05906CBCED155079B119B6F7B94AA3366A6EEBE05E937758FD8775B5
A58B05E0187595C97FCD103D28856D0E29FD8D319FDBA2CFC41DE41FAA5FB58E
92D97DAE6055BA81C9204C20C738F9CD7211534C182D1F3697034CD0DAC479E6
73FB7432E59D7D5CB8E031721FD889267C163D43574B73BB611076583BC4C0F1
FEB1F16E3F928004FC835A98368911BA6012C71DFC56FBCB44AD9FABEE7D0B6A
AB198F91310678153771253F0DB27D0BC364781AA89DA544EAD2630AC2088B97
607DF7242B1DEC3F8C428394CE6316E250E7A94F10E7159E7C8095BA2EE71701
FE8AA627ED64658353BEB82A0F5299F48C36AF1A927484CF47D187D657A86880
8EE2DAF9C76833B7DFDA5DC5E2A367515731434EDD24BCD80422D52C8F546ED7
C74E086635F8B8B4B0404821CE4B5F1A8735BBD102337A472099BEE4A88A1E10
5FDBBEAF6039F6A9F68C78BE291E7AE71F58E7613084DDCFDD93DAE5DBDEDFC9
FF0C89CA120E522C6C612937449F93462CD0E63A6FE0B6571F56ADF5DE6B2EEF
5667609547C026041CDEDC8D79CEFEADA251226B3DA693B072D3E6FBDE09363E
23D669B6E76D4CFA61DC63AC001E7B56A021CA661DF62CDAF784EE97F695176F
645454D32912D7367371EAF1BCBE0D7BF7DF01C5E410C373D3635FD11D5B3C20
B84FF291D05CC9F431BE2BF036F46D731E0A7AA792A5C86C4C1D9C84A2BC9F15
3257F3E3AF038EA936FF5FCFE261C26AB36F3D2F757A33759094D3EAFA111E4D
C7B89151D471150E6948951DBE8C5032E43CB86A4C7E4E787CDA312046760CBE
7FB97644E31A2AD007D1881F6DF4BB1E171740B45067A4A91D28CE544E67797B
1956F43497DA4DF3B8B1B422CDBF85078EF2D7A6F31F23AF4C366D0FA577C3C6
10C95D82C63320505CC5B43F24EE507763E969772EEFC4848EC33FDC7882C177
D9BA77D3A3DDE0698EFA8210D40719801122C18604B1749F45C451DB99B86FC3
EDE3A666F7F32C12D3E15E6469FC043540E044AF933656B00794FC44B692E104
6CDACC24E0FE24153EE70E42E56AF2E36CF7584D3A3B75EC11830F5B4F434799
33513F0E4A2997AAF91CCE48A09B3E5A2FA1D301823B1B3A613BE4608D6EEA2A
A8ED23FE39F06F78D5C73AED023D26C0E191532B282869DB3438526F63F55CD4
BE58ABEA05369745D045FC813ADB8768BD95B5960839361FE7CEEA92A4B3F457
25CCCB8AA9CF8BE703B06003B43A0E439F122066E1202EB62E41C558531945AE
96F1EBC4A39439A07ED1D13D1A2540A1A7E21E896AEA767BFCDDBC1909EDE8BA
CCB663BC80B0376E86C89FF81CE21DB91C01D2BF2AD11CFA8B620F5B8209F9AC
7C1497D89812FE73722101083B91B7D2B147638272571454FC87B207CA0C68F3
E638CC05C0EBB65E13FBC1B28F200BA6630AA44CB5A78154ACF6DFC2C66526AB
1A0D97C8CB2E24342EAE64898997DF4B191824B7328915B363A161BC7BB0CF1E
FC3A2FDBA0D587F378484C15E8211A31D0C933B93FFFBED5CBB9FD17E355A850
0272E1E71BD91E1F6959E1BC9F3FD3DC38D758F85C768B21FE7F71E89E48C03F
A871C925A540F1B1BBAAF4E12E98CF0811F0FF42ED6AFD5B00180790967FC944
A99C48DB8C90AC61932217D6E2ADBB2D1CF2ACAF3F3BB510AEE0BEBE7DD93882
76AC32305AD71AB47B80FCEA76F6BF0797C5693895A99D934A243A7B99536AAD
6EACCDA67E9835F13EB8C4E701DE626B1ECECE5226921EA6BDD010F54C85F28A
A700DDFF37E8870D775F0A35D384498B851D3FE8B9ED083DC4E16B2395FEDC2F
A9AA4B3286E2BC3026DC9FAA92B1DB16244C03B0B0C3D6CA477380F73085B7E5
C73169B9FD485DDF23DD01D9790B8CE5699F074261AC81753319A5410ED01E6B
2CDBE0512BC8E9F0796CFCC332156B2510A1C4674933A5E639DDF80D9E8FF45C
1FE631BD158C95FF15727D7A3ED609AE9F6A1869A6D28522C850B5925C92B78E
5AC0873877D270D44784EEBA130A6163618968953C5744A850189817359BA625
ECE37595344405E0BC9CF2CB11834A950A69468E1EDFF5F96D7B93A8F2CE3742
C0AECB5E56977A653CC992FE035872EC7670CCE657206C65FE5B07989E94314B
20092DD0BF40582F22E369913F7AB575EAF94A40EE4306DEDB3C07E188E59879
A9038BC3E2E2EAD41DBF870413913F31CAD113AD40F22160BE18D78A0C0B8F20
F5994DC6C3CB1581DE09068F53E51E1452658F9C19253F7D9E8C942765889830
A988C190EC1A5607E370F42718D2C559AB415E139735820A527F173F78F5E849
63EE5E918CA35897E49FD5B8B7E2E4501EC93607083CBAE1789490D69F81C4A8
6E12A6F34915CAC82958478026705577ADD45D5952916C6BB73F4A9CFFDA46B9
B741940F3554A99D33F5C5121773F8C0FBF85FC4B3F67FFCA940DAB798156A6F
E70A4AB27EF5831A8EFFB99914CAF2EDBFE37F6ABD41FFA2F50034F05C127D95
13E535E8CEE594CD7478CD5159D23333C9EC4581496727FE331FA0234E78A6B1
74978994C9423F828294A1DCF8F8DC043A81E84F4F30B8EEE31773ED3188A76C
86E0CEAEF1FC3E24294AE1243552EE163667ADD3A80430230C491A7FF68E4FAC
D1C6B9CAB13BBC139E31E5EB0BB0C74807D43D2DEA7B1FA734BDCC6F16DEC75F
4EE6875CDF8FCF7FC31FB1CACDD156F2941DC8FBC6E3AA2EF59EC6476B73B8AF
F61C33A07D91ADBC3ADEE1EE9A0D41F5FE4F3E7690A00305C0B3D4CBD56FF359
44715C4B1AD90602E73702E225BFF6381F769B94DE152B11680AB29A612DDB00
397B99FE073195E9BB86E363925CB311CFA6C16E6370F7B7470B5A034CBA0079
8AAF1FEC3FBAC0D97667F0B02239B4DB90668A3B064CA4BAE76F8603B1F3EC94
02E280C1F4887904E42045261A1DEA0C63FD336E4126CE811C6D984D095731CC
2A5E209E051555D7E2621C4E00D27E3669ED09F132A954C4AF133E789CF1F99E
0F298DCB4408B98C1F251CB49EAE93A189AB5D9D2D72C812593E0E37A01DDA31
166B640EC4943A2A9E1AB9E75408EEB729DE1F11608E475895118F8264A6F3B1
9DA4FF14F47FCC336EF7A07FA40CC3E03D2631FDC8E3CABA986620BB40D2C44D
54B38BBB3E0D8DF431EEC090C8345B86FEF60B66509F5FE03E35B156FF16EFD1
238324E3BB55613C3A7D3A7071F3A2FAA5CC0659C0232E22D7EC1AFF7176E954
E77862FAF4B5BA0A400C1BE965B54765E2C963C9E8F913374C3E422E81A6993A
41E0632D7021A5E47881EF8F5313F1BCB1C28A52FE6E45ED2EF15C150997CC9E
7A0AD30AA6E41035C139218FA14739F2CBB112E68E3CF3070AB5A4C2E1DE51FC
EEA8F06CDECABA4816D8B9956F920CA79EF8BA3D662CD291CF24235EF38127A6
9A3E8D345E9F597D7E6AC57C300FBBB8E55B1CB0AB1917849B618A84B339304D
CC2E706940E20C1762FD732CD9260F7DDF50AFA4728CF02D3E5E19A6D82BB052
D219AC6CB0A07E2312999B7D022B229564BB1998540E2AA34522112A9FB7E032
3B4D7CC18AC29BD9F04FE188A055D22328BE75191E4E0BB2B922E5AD62FA8F80
0F6774A548CFCB716178275FA12AE7B3692F4297EF9625FB15CA24E2AC3DBD4F
5A7BDBDA83429B821FC8E1370A004FD4F93D409D541609F766BB129C81464B03
64FB3463E1AB80A0AAB175F369C7B91E3E0F84322454AD0D292183E95EE286E2
D9E454A5C1E26E28FF4FFB6884FD8326187DD24E090B3AEB16FF4B32F141DD6F
6E081E4427D534C1EA997CC46CBFD6A1A9632F5917590848DD8EFA3A7D07433D
7CFA01199DB35DD723C11E7FE2CC833CC679E9FC7F608022AD15A82DE7E5E241
03C924E2FA9DB914250BED6A8139CB2F82F3D4F457EC8EFE3EDA179DD6079939
85891A79102F8038D49FA68D2A7E7A6FDDD31C0B7439F242E578DA38FA40DE77
97C340C3021BB43EC4D1FD8C1FF79D93AF4DC14E9044F18D9224A1C600743B40
23A9D63E7317F5FB73126C69DDCD160FBD21BA4CC1F454BD8B760639F99D2C6A
732D3AFB6A1F978C8039676D9DFBD0D3CA96A50F385253ACB8AD8BCC04DB380A
61F3ED42908704F660A38089CC0F6CBEBD15E2CF5B3FB9B5F3D0C541BB5600D2
94124EDD49577EF2E015E873D537BF38230D100F3F51676C0953E437071987BF
B5F8030FF54E5DC524E6898E27303AA929FE8081B29F4F1F1BAE23615D5741F2
A29DB34EAF271A3037E04D2F9B89687A4FCC77E99B3857436C8B52C8CD52F160
CB1D6CF6A08EADD637472BFB312B1CF724EFBE5535A89B975E7809CDB0289543
4FD3750FD68DF2E852C864C4AE6E0392C4F86A24AAB4BCF06C243FF1565CF886
28BA52D3DA6A1780944DFC3BEC0A5752A5416D2BFBDBF2BEED5B2665B1E37549
B7AE6DCDA9036CC41E422B2A5C28BDD96B689203EB53D6D72B825F6D169CFC97
7BFE848E5C3CC55BD245D26E567F7DA249DDB2F8A1D9026A5F99CCBEAC5AC739
9D66664E3290D71307ED00F8CE9BD3626559D7FB7858B2FA2D0F33C22456714D
A8DCCBD746EFEFFDC46F52E4EA7062B32D2ECBC0A811EACB997C338643E3099B
81706A51920DF8D6499908DBE91E4C944828F30B97F9DEEC209C92F4C2F27229
8D8F46386D89B71D5D0735CCE5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 27957199 26000196 1000 600 600 (Fig4.dvi)
@start /Fa 206[44 49[{}1 83.022 /HFBR10 rf /Fb 255[48{}1
58.1154 /HFBRSY8 rf /Fc 139[53 4[73 2[31 3[72 4[65 20[99
1[79 34[57 57 40[{}9 139.476 /HFBR10 rf /Fd 172[88 102
5[87 64[95 11[{}4 139.476 /HFBRMI10 rf /Fe 145[23 26[27
32 5[28 64[30 11[{}5 41.511 /HFBRMI8 rf /Ff 139[17 11[23
81[23 22[{}3 41.511 /HFBR8 rf /Fg 197[18 24[40 17[26
28 14[{}4 58.1154 /HFBRMI8 rf /Fh 162[18 1[18 29[48 5[32
32 3[32 32 32 25[32 21[35{}10 58.1154 /HFBR8 rf /Fi 145[103
8[93 14[100 12[66 11[100 2[58 36[122 3[108 1[85 15[{}9
199.253 /HFBRMI10 rf /Fj 255[155{}1 199.253 /HFBRSY10
rf /Fk 139[72 77 64 1[96 1[96 154 38 4[96 61 90 1[90
96 93 3[55 1[55 7[113 2[126 18[152 3[101 101 101 101
101 101 101 101 101 101 6[78 78 17[101 21[106{}32 199.253
/HFBR17 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-600 -600 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 -600 a -600
-600 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 -600 a 0 TeXcolorgray
0 TeXcolorgray -600 2694 a
 /PSfrag where{pop(pAp)[[0(c)1 0]](pBp)[[1(c)1 0]](pCp)[[2(c)1 0]](-2)[[3(B)1
0]](0)[[4(B)1 0]](0.5)[[5(B)1 0]](1)[[6(B)1 0]](2)[[7(B)1 0]](2.2)[[8(B)1
0]](2.4)[[9(B)1 0]](2.6)[[10(B)1 0]](3)[[11(B)1 0]](6)[[12(B)1 0]](9)[[13(B)1
0]](-4)[[14(B)1 0]](4)[[15(B)1 0]](5)[[16(B)1 0]](10)[[17(B)1 0]](8)[[18(B)1
0]](12)[[19(B)1 0]](0.0)[[20(B)1 0]](1.2)[[21(B)1 0]](0.8)[[22(B)1
0]](1.0)[[23(B)1 0]](0.25)[[24(B)1 0]](0.3)[[25(B)1 0]](0.706)[[26(B)1
0]](0.706ins)[[27(B)1 0]](0.709)[[28(B)1 0]](0.712ins)[[29(B)1 0]](0.712)[[30(B)1
0]](nav/nB)[[31(B)1 0]](g=0.05GS)[[32(B)1 0]](g=0.2GS)[[33(B)1 0]](nL)[[34(B)1
0]](nR)[[35(B)1 0]](eps)[[36(B)1 0]](IL)[[37(B)1 0]](eps2)[[38(B)1
0]](eV)[[39(B)1 0]](etaL)[[40(B)1 0]](etaNL)[[41(B)1 0]](IR)[[42(b)1
0]](d=wL-wR)[[43(Bl)1 0]](d=wR)[[44(Bl)1 0]](d=wL)[[45(Bl)1 0]](d=2wR)[[46(Bl)1
0]]47 0 -1/Begin PSfrag}{userdict /PSfrag{pop}put}ifelse
 -600 2694 a @beginspecial
93 @llx 197 @lly 518 @urx 594 @ury 4250 @rwi @setspecial
%%BeginDocument: Fig4.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: Fig4.eps
%%Creator: matplotlib version 2.2.4, http://matplotlib.org/
%%CreationDate: Fri Nov  8 11:03:35 2019
%%Orientation: portrait
%%BoundingBox: 93 197 518 594
%%EndComments
%%BeginProlog
/mpldict 8 dict def
mpldict begin
/m { moveto } bind def
/l { lineto } bind def
/r { rlineto } bind def
/c { curveto } bind def
/cl { closepath } bind def
/box {
m
1 index 0 r
0 exch r
neg 0 r
cl
} bind def
/clipbox {
box
clip
newpath
} bind def
%!PS-Adobe-3.0 Resource-Font
%%Title: DejaVu Sans
%%Copyright: Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved. Copyright (c) 2006 by Tavmjong Bah. All Rights Reserved. DejaVu changes are in public domain 
%%Creator: Converted from TrueType to type 3 by PPR
25 dict begin
/_d{bind def}bind def
/_m{moveto}_d
/_l{lineto}_d
/_cl{closepath eofill}_d
/_c{curveto}_d
/_sc{7 -1 roll{setcachedevice}{pop pop pop pop pop pop}ifelse}_d
/_e{exec}_d
/FontName /DejaVuSans def
/PaintType 0 def
/FontMatrix[.001 0 0 .001 0 0]def
/FontBBox[-1021 -463 1793 1232]def
/FontType 3 def
/Encoding StandardEncoding def
/FontInfo 10 dict dup begin
/FamilyName (DejaVu Sans) def
/FullName (DejaVu Sans) def
/Notice (Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved. Copyright (c) 2006 by Tavmjong Bah. All Rights Reserved. DejaVu changes are in public domain ) def
/Weight (Book) def
/Version (Version 2.35) def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -130 def
/UnderlineThickness 90 def
end readonly def
%%EndProlog
mpldict begin
93.6 197.64 translate
424.8 396.72 0 0 clipbox
gsave
0 0 m
424.8 0 l
424.8 396.72 l
0 396.72 l
cl
grestore
gsave
63.72 243.688933 m
403.56 243.688933 l
403.56 378.8676 l
63.72 378.8676 l
cl
1.000 setgray
fill
grestore
0.800 setlinewidth
1 setlinejoin
0 setlinecap
[] 0 setdash
0.000 setgray
gsave
/o {
gsave
newpath
translate
0.8 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -3.5 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
63.72 243.689 o
grestore
gsave
/o {
gsave
newpath
translate
0.8 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -3.5 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
233.64 243.689 o
grestore
gsave
/o {
gsave
newpath
translate
0.8 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -3.5 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
403.56 243.689 o
grestore
gsave
/o {
gsave
newpath
translate
0.8 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-3.5 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
63.72 249.515 o
grestore
/DejaVuSans findfont
7.000 scalefont
setfont
gsave
24.641875 246.858940 m
0.000000 0.000000 rmoveto
0.000000 rotate
(0.25) show
grestore
gsave
/o {
gsave
newpath
translate
0.8 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-3.5 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
63.72 303.489 o
grestore
gsave
/o {
gsave
newpath
translate
0.8 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-3.5 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
63.72 357.462 o
grestore
gsave
29.095000 354.805963 m
0.000000 0.000000 rmoveto
0.000000 rotate
(0.3) show
grestore
gsave
23.188750 308.293892 m
0.000000 0.000000 rmoveto
90.000000 rotate
(IL) show
grestore
3.000 setlinewidth
2 setlinecap
0.502 setgray
gsave
339.8 135.2 63.72 243.7 clipbox
63.72 252.690776 m
85.46976 252.953735 l
101.1024 253.361775 l
112.65696 253.867183 l
122.17248 254.497161 l
129.64896 255.20076 l
135.76608 255.980353 l
141.20352 256.894881 l
145.96128 257.943262 l
149.35968 258.884992 l
152.0784 259.782032 l
154.79712 260.854377 l
157.51584 262.150605 l
159.55488 263.307797 l
162.2736 265.168156 l
164.31264 266.900706 l
165.672 268.185276 l
167.71104 270.513693 l
169.75008 273.358529 l
171.10944 275.634484 l
172.4688 278.302718 l
174.50784 283.166811 l
175.8672 287.189997 l
177.22656 292.143901 l
177.90624 294.707427 l
179.2656 301.018658 l
180.62496 308.553144 l
181.30464 312.802587 l
183.34368 327.997209 l
184.02336 334.043754 l
184.70304 339.041485 l
185.38272 345.278016 l
186.0624 350.377866 l
186.74208 356.914706 l
187.42176 360.464219 l
188.10144 365.453747 l
189.4608 369.799046 l
190.14048 371.049073 l
190.82016 371.56873 l
191.49984 372.723115 l
192.17952 370.573458 l
192.8592 370.734515 l
193.53888 368.201214 l
195.57792 364.301304 l
196.93728 362.279025 l
197.61696 361.836226 l
198.29664 361.092687 l
198.97632 360.704725 l
199.656 360.648377 l
201.01536 361.232155 l
202.37472 362.713188 l
203.0544 364.497768 l
203.73408 365.746283 l
204.41376 366.185843 l
205.09344 367.150026 l
205.77312 368.357738 l
206.4528 370.429457 l
207.13248 371.213368 l
207.81216 370.788705 l
208.49184 371.800816 l
209.8512 370.989486 l
210.53088 370.372893 l
211.89024 368.280663 l
213.2496 365.551979 l
218.00736 355.384449 l
219.36672 353.203703 l
220.72608 351.582123 l
222.76512 349.873537 l
226.16352 347.892277 l
226.8432 348.14768 l
227.52288 347.365928 l
228.20256 346.391166 l
228.88224 345.901303 l
229.56192 344.866522 l
230.2416 344.095565 l
231.60096 342.300406 l
232.28064 340.851541 l
232.96032 339.775093 l
234.99936 335.838913 l
238.39776 329.870954 l
239.75712 328.049456 l
240.4368 327.02547 l
243.8352 323.099005 l
244.51488 322.515012 l
245.19456 321.709943 l
245.87424 321.123791 l
247.91328 318.888208 l
249.27264 317.381483 l
250.632 315.665773 l
251.31168 314.954403 l
254.0304 311.267364 l
255.38976 309.396426 l
260.14752 303.695096 l
264.2256 299.679899 l
271.0224 293.546133 l
271.70208 292.622538 l
273.06144 291.735862 l
273.74112 291.074362 l
274.4208 290.074557 l
275.10048 289.581887 l
275.78016 288.940465 l
276.45984 288.609932 l
278.49888 286.634069 l
280.53792 285.244791 l
283.93632 282.826778 l
289.37376 279.304035 l
290.05344 278.451253 l
290.73312 278.410881 l
292.77216 277.060032 l
293.45184 276.43653 l
294.13152 276.271155 l
294.8112 275.746533 l
295.49088 275.386853 l
296.17056 274.848413 l
296.85024 274.597329 l
297.52992 273.927625 l
298.2096 273.811474 l
298.88928 273.267637 l
299.56896 273.097729 l
302.28768 271.44139 l
302.96736 271.100925 l
303.64704 270.914392 l
305.0064 270.327376 l
305.68608 269.768858 l
306.36576 269.716828 l
307.04544 269.257837 l
307.72512 269.142334 l
308.4048 268.673628 l
309.76416 268.294302 l
310.44384 267.735568 l
313.84224 266.508211 l
314.52192 266.103841 l
316.56096 265.451841 l
317.24064 264.98076 l
317.92032 264.884472 l
318.6 264.566028 l
319.27968 264.406266 l
320.63904 263.880564 l
321.31872 263.703963 l
321.9984 263.323342 l
322.67808 263.241734 l
329.47488 261.082146 l
330.15456 260.974414 l
331.51392 260.476563 l
332.87328 260.059671 l
333.55296 260.029878 l
334.91232 259.654222 l
340.34976 258.194347 l
342.3888 257.777024 l
345.7872 257.029167 l
347.14656 256.817159 l
350.54496 256.092618 l
359.3808 254.545306 l
361.41984 254.241327 l
363.45888 253.947279 l
379.09152 251.952202 l
385.20864 251.359357 l
387.24768 251.154042 l
400.84128 250.022541 l
403.56 249.833418 l
403.56 249.833418 l
stroke
grestore
1.500 setlinewidth
0 setlinejoin
[] 0 setdash
0.000 setgray
gsave
63.72 243.688933 m
63.72 378.8676 l
stroke
grestore
gsave
403.56 243.688933 m
403.56 378.8676 l
stroke
grestore
gsave
63.72 243.688933 m
403.56 243.688933 l
stroke
grestore
gsave
63.72 378.8676 m
403.56 378.8676 l
stroke
grestore
gsave
63.72 59.508 m
403.56 59.508 l
403.56 228.481333 l
63.72 228.481333 l
cl
1.000 setgray
fill
grestore
0.800 setlinewidth
1 setlinejoin
0 setlinecap
[] 0 setdash
gsave
/o {
gsave
newpath
translate
0.8 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -3.5 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
63.72 59.508 o
grestore
gsave
53.704375 30.695500 m
0.000000 0.000000 rmoveto
0.000000 rotate
(0.706) show
grestore
gsave
/o {
gsave
newpath
translate
0.8 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -3.5 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
233.64 59.508 o
grestore
gsave
223.624375 30.695500 m
0.000000 0.000000 rmoveto
0.000000 rotate
(0.709) show
grestore
gsave
/o {
gsave
newpath
translate
0.8 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -3.5 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
403.56 59.508 o
grestore
gsave
393.544375 30.695500 m
0.000000 0.000000 rmoveto
0.000000 rotate
(0.712) show
grestore
gsave
227.444688 3.929875 m
0.000000 0.000000 rmoveto
0.000000 rotate
(eps) show
grestore
gsave
/o {
gsave
newpath
translate
0.8 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-3.5 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
63.72 90.0737 o
grestore
gsave
29.095000 87.417472 m
0.000000 0.000000 rmoveto
0.000000 rotate
(0.8) show
grestore
gsave
/o {
gsave
newpath
translate
0.8 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-3.5 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
63.72 121.462 o
grestore
gsave
/o {
gsave
newpath
translate
0.8 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-3.5 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
63.72 152.851 o
grestore
gsave
35.766875 150.194784 m
0.000000 0.000000 rmoveto
0.000000 rotate
(1) show
grestore
gsave
/o {
gsave
newpath
translate
0.8 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-3.5 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
63.72 184.24 o
grestore
gsave
/o {
gsave
newpath
translate
0.8 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-3.5 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
63.72 215.628 o
grestore
gsave
29.095000 212.972097 m
0.000000 0.000000 rmoveto
0.000000 rotate
(1.2) show
grestore
3.000 setlinewidth
[19.2 4.8 3 4.8] 0 setdash
1.000 0.000 0.000 setrgbcolor
gsave
339.8 169 63.72 59.51 clipbox
63.72 153.402436 m
73.23552 153.518817 l
73.9152 153.374566 l
74.59488 153.537397 l
82.75104 153.52243 l
83.43072 153.669004 l
87.5088 153.75029 l
88.86816 153.636231 l
100.42272 154.020987 l
101.1024 153.877768 l
101.78208 154.081113 l
104.5008 154.100467 l
105.86016 154.070791 l
106.53984 154.203688 l
107.21952 154.068468 l
107.8992 154.264072 l
111.97728 154.288587 l
112.65696 154.413484 l
113.33664 154.321617 l
115.37568 154.444192 l
116.05536 154.438515 l
116.73504 154.588701 l
117.41472 154.354132 l
118.0944 154.436451 l
118.77408 154.661472 l
119.45376 154.492964 l
120.13344 154.745597 l
124.8912 154.928814 l
125.57088 154.767015 l
126.25056 155.094741 l
131.00832 155.389695 l
131.688 155.268668 l
132.36768 155.320021 l
133.04736 155.545816 l
133.72704 155.603104 l
135.0864 155.240283 l
135.76608 155.747355 l
139.84416 156.199978 l
140.52384 155.837157 l
141.20352 156.352745 l
142.56288 156.44616 l
143.24256 156.540865 l
143.92224 156.397904 l
144.60192 156.765886 l
145.2816 156.846915 l
145.96128 156.672472 l
146.64096 157.056195 l
148.68 157.404823 l
149.35968 157.016971 l
150.03936 157.578492 l
150.71904 156.931814 l
152.0784 157.868285 l
152.75808 158.035244 l
153.43776 158.338714 l
154.11744 158.119885 l
154.79712 158.66902 l
158.19552 159.591298 l
158.8752 159.431048 l
159.55488 160.056308 l
160.23456 159.895542 l
160.91424 160.320037 l
161.59392 160.454224 l
162.2736 161.090064 l
163.63296 161.798933 l
164.31264 161.157158 l
164.99232 162.496964 l
167.71104 164.000117 l
168.39072 163.718583 l
169.0704 165.167287 l
172.4688 168.232687 l
173.14848 167.993989 l
173.82816 168.629313 l
174.50784 171.245961 l
175.18752 171.651877 l
175.8672 173.337215 l
177.22656 174.396002 l
177.90624 177.805644 l
178.58592 179.22622 l
179.94528 183.070164 l
180.62496 185.269283 l
181.30464 187.938057 l
181.98432 187.976765 l
182.664 193.291605 l
183.34368 194.411293 l
184.02336 195.278606 l
184.70304 202.3402 l
185.38272 203.068939 l
186.0624 209.210578 l
186.74208 206.801662 l
187.42176 214.557674 l
188.10144 213.118002 l
188.78112 218.717215 l
189.4608 219.871224 l
190.14048 220.718667 l
190.82016 220.539579 l
191.49984 215.82471 l
192.17952 220.210562 l
192.8592 215.162806 l
193.53888 219.081843 l
194.21856 218.233109 l
194.89824 217.75081 l
195.57792 216.88582 l
196.93728 215.690523 l
197.61696 214.035377 l
198.29664 214.779341 l
198.97632 215.10397 l
199.656 215.05236 l
200.33568 214.751471 l
201.01536 215.489242 l
201.69504 215.412859 l
202.37472 216.111147 l
203.0544 213.453986 l
203.73408 213.396956 l
204.41376 217.064134 l
205.09344 218.792308 l
205.77312 219.077456 l
206.4528 215.376473 l
207.13248 216.016442 l
207.81216 220.800727 l
208.49184 218.011959 l
209.17152 219.594076 l
209.8512 220.10089 l
210.53088 219.870708 l
211.21056 219.897287 l
211.89024 219.332927 l
212.56992 218.422004 l
213.2496 217.771454 l
214.60896 215.528466 l
217.32768 212.298428 l
218.00736 211.954703 l
218.68704 211.145968 l
219.36672 210.84766 l
220.0464 209.915834 l
220.72608 209.625009 l
221.40576 208.666604 l
222.76512 208.447002 l
223.4448 208.120308 l
224.12448 208.414745 l
224.80416 208.15179 l
225.48384 208.212432 l
226.16352 207.671813 l
226.8432 200.878593 l
227.52288 202.877464 l
228.20256 206.417422 l
228.88224 205.004587 l
229.56192 205.878352 l
230.2416 204.603316 l
230.92128 203.988637 l
231.60096 200.98362 l
232.28064 202.025119 l
232.96032 201.086841 l
234.31968 200.843498 l
234.99936 200.127662 l
235.67904 194.100082 l
236.35872 199.462146 l
237.0384 199.182417 l
237.71808 195.117581 l
238.39776 197.617848 l
239.07744 191.01765 l
239.75712 194.245623 l
240.4368 192.135016 l
241.11648 193.509143 l
241.79616 192.916397 l
242.47584 193.250317 l
243.15552 193.018586 l
243.8352 193.443598 l
244.51488 192.239527 l
245.19456 192.998458 l
245.87424 191.03752 l
246.55392 184.116565 l
247.2336 182.750695 l
247.91328 191.877222 l
248.59296 189.842739 l
249.27264 190.837272 l
249.95232 185.719326 l
250.632 182.896753 l
251.31168 188.692085 l
251.99136 188.313523 l
253.35072 186.244462 l
254.0304 187.306604 l
254.71008 181.806999 l
255.38976 182.40826 l
256.06944 185.740486 l
256.74912 184.259525 l
257.4288 184.160692 l
258.10848 178.707536 l
258.78816 178.495159 l
259.46784 181.961056 l
260.14752 182.996103 l
260.8272 182.353553 l
261.50688 182.59638 l
262.18656 181.933444 l
262.86624 181.51411 l
263.54592 180.356746 l
264.2256 179.861286 l
265.58496 176.934202 l
266.26464 179.019521 l
266.94432 179.794967 l
267.624 178.58109 l
268.30368 178.556833 l
268.98336 176.752791 l
269.66304 177.635587 l
270.34272 173.693842 l
271.0224 173.75242 l
271.70208 169.989763 l
272.38176 174.19885 l
273.06144 176.440807 l
273.74112 176.29733 l
274.4208 168.669311 l
275.10048 167.192221 l
275.78016 168.593186 l
276.45984 172.845109 l
277.13952 172.753501 l
277.8192 173.829578 l
278.49888 167.553752 l
279.85824 172.781629 l
280.53792 171.074356 l
281.2176 172.696987 l
281.89728 171.638974 l
282.57696 171.148159 l
284.616 171.217317 l
285.29568 170.386389 l
285.97536 170.94404 l
286.65504 168.796531 l
287.33472 170.010666 l
288.0144 169.064905 l
288.69408 168.901042 l
289.37376 167.778515 l
290.05344 161.731066 l
290.73312 168.646344 l
291.4128 168.941556 l
292.09248 168.163271 l
292.77216 167.19506 l
293.45184 164.310038 l
294.13152 168.097726 l
294.8112 165.282894 l
295.49088 166.878172 l
296.17056 163.494593 l
296.85024 166.558445 l
297.52992 160.990456 l
298.2096 166.158723 l
298.88928 163.34002 l
299.56896 165.721066 l
300.24864 165.18148 l
300.92832 164.297135 l
301.608 161.321795 l
302.28768 161.389921 l
302.96736 161.076646 l
303.64704 162.482255 l
304.32672 162.20614 l
305.0064 162.503416 l
305.68608 158.812755 l
306.36576 162.405356 l
307.04544 160.170883 l
307.72512 163.651231 l
308.4048 160.918976 l
309.08448 160.51048 l
309.76416 163.325053 l
310.44384 158.84527 l
311.12352 159.483949 l
311.8032 162.353745 l
312.48288 162.332327 l
313.16256 162.053889 l
313.84224 161.247218 l
314.52192 159.434919 l
315.2016 159.978376 l
315.88128 161.371599 l
316.56096 161.919702 l
317.24064 158.24246 l
317.92032 160.976005 l
318.6 159.50227 l
319.27968 160.427129 l
319.95936 159.705615 l
320.63904 159.909218 l
321.31872 160.347649 l
321.9984 157.213091 l
322.67808 160.63357 l
323.35776 160.218107 l
324.03744 159.24396 l
325.3968 158.369164 l
326.07648 156.947813 l
326.75616 158.881139 l
327.43584 158.764758 l
328.11552 158.370712 l
328.7952 157.210768 l
329.47488 158.198591 l
330.15456 159.563171 l
330.83424 157.745968 l
331.51392 157.515528 l
332.1936 155.875607 l
332.87328 155.640005 l
333.55296 158.743855 l
334.23264 158.264653 l
334.91232 159.12345 l
335.592 158.510318 l
336.27168 157.440176 l
336.95136 157.318376 l
337.63104 156.740597 l
338.31072 156.615184 l
338.9904 156.902138 l
339.67008 157.343149 l
340.34976 155.782192 l
341.02944 157.32715 l
341.70912 157.751645 l
342.3888 156.934652 l
343.06848 156.527188 l
343.74816 157.495658 l
344.42784 157.687132 l
345.10752 156.956071 l
345.7872 155.988376 l
346.46688 157.115031 l
347.14656 157.260572 l
347.82624 157.069872 l
348.50592 154.970876 l
349.86528 156.02889 l
351.22464 155.726711 l
351.90432 155.16648 l
352.584 156.055727 l
353.26368 155.87251 l
353.94336 154.747661 l
355.30272 156.283845 l
355.9824 155.161577 l
356.66208 154.848818 l
357.34176 156.156367 l
358.02144 156.114305 l
358.70112 156.32823 l
359.3808 154.396452 l
360.06048 155.735485 l
360.74016 154.461224 l
361.41984 155.4075 l
362.09952 154.222783 l
362.7792 155.192285 l
363.45888 155.524398 l
364.13856 155.316408 l
364.81824 155.243121 l
365.49792 155.478981 l
366.1776 155.498077 l
366.85728 155.128804 l
367.53696 154.262523 l
368.21664 154.2153 l
368.89632 154.95849 l
369.576 155.123643 l
370.25568 154.857333 l
370.93536 155.243637 l
371.61504 154.144078 l
372.29472 155.197446 l
374.33376 154.707663 l
375.01344 154.566251 l
375.69312 153.416629 l
376.3728 153.912863 l
377.05248 154.751274 l
377.73216 153.833641 l
378.41184 154.078016 l
379.09152 153.513656 l
379.7712 154.422516 l
380.45088 154.743791 l
381.13056 153.52372 l
381.81024 154.513608 l
382.48992 154.301747 l
383.1696 154.437999 l
383.84928 154.358777 l
385.20864 154.423032 l
385.88832 153.418177 l
386.568 154.017374 l
387.92736 154.067952 l
388.60704 153.39005 l
389.28672 154.301747 l
389.9664 153.458175 l
390.64608 154.390259 l
391.32576 153.90667 l
392.00544 154.052727 l
392.68512 154.011181 l
393.3648 154.151819 l
394.04448 153.905637 l
394.72416 154.219945 l
395.40384 153.52114 l
396.08352 154.124466 l
396.7632 153.347729 l
397.44288 153.959312 l
398.12256 153.954667 l
398.80224 153.628232 l
399.48192 153.538946 l
400.1616 153.73171 l
400.84128 153.210703 l
401.52096 153.515721 l
402.88032 153.252508 l
403.56 153.482948 l
403.56 153.482948 l
stroke
grestore
2 setlinecap
[] 0 setdash
0.000 0.000 1.000 setrgbcolor
gsave
339.8 169 63.72 59.51 clipbox
63.72 151.761121 m
84.79008 151.388865 l
87.5088 151.323011 l
88.86816 151.395499 l
100.42272 150.972921 l
101.1024 151.071352 l
101.78208 150.909009 l
106.53984 150.746073 l
107.21952 150.836737 l
107.8992 150.678493 l
111.97728 150.588044 l
112.65696 150.481362 l
113.33664 150.537292 l
115.37568 150.403804 l
116.05536 150.393664 l
116.73504 150.266055 l
117.41472 150.427212 l
122.85216 149.892343 l
123.53184 149.914941 l
124.8912 149.804106 l
125.57088 149.905449 l
126.25056 149.638634 l
134.40672 149.094003 l
135.0864 149.203706 l
135.76608 148.793048 l
139.84416 148.249981 l
140.52384 148.484165 l
141.20352 148.05846 l
142.56288 147.906256 l
143.24256 147.792023 l
143.92224 147.854263 l
144.60192 147.532112 l
145.2816 147.423326 l
145.96128 147.503905 l
146.64096 147.164764 l
148.68 146.736254 l
149.35968 146.966015 l
150.03936 146.483031 l
150.71904 146.901186 l
152.0784 146.061695 l
153.43776 145.558431 l
154.11744 145.641167 l
154.79712 145.146101 l
158.19552 143.969681 l
158.8752 143.976531 l
159.55488 143.391502 l
160.23456 143.386163 l
160.91424 142.938182 l
161.59392 142.698875 l
162.2736 142.078196 l
163.63296 141.229644 l
164.31264 141.531192 l
164.99232 140.349539 l
167.03136 138.935052 l
167.71104 138.358761 l
168.39072 138.308224 l
169.0704 136.959429 l
171.10944 134.603729 l
172.4688 132.957161 l
173.14848 132.691965 l
173.82816 131.746816 l
174.50784 129.308974 l
175.18752 128.445859 l
175.8672 126.594555 l
177.22656 124.394996 l
177.90624 121.102399 l
178.58592 119.177583 l
179.94528 114.33523 l
181.30464 108.357609 l
181.98432 106.910167 l
182.664 101.610935 l
184.02336 96.830446 l
184.70304 90.101948 l
185.38272 87.792093 l
186.0624 81.727637 l
186.74208 81.695438 l
187.42176 74.852761 l
188.10144 74.527643 l
188.78112 69.705516 l
189.4608 68.213686 l
190.14048 67.22129 l
190.82016 67.207699 l
191.49984 70.430127 l
192.17952 67.73259 l
192.8592 71.485788 l
193.53888 69.247881 l
194.21856 70.2591 l
194.89824 71.004638 l
195.57792 71.995739 l
196.93728 73.462328 l
197.61696 74.831564 l
198.29664 74.479318 l
198.97632 74.34254 l
200.33568 74.54981 l
201.01536 73.898604 l
201.69504 73.756757 l
202.37472 73.009385 l
203.0544 74.505206 l
203.73408 74.194489 l
204.41376 71.307804 l
205.09344 69.733239 l
205.77312 69.176472 l
206.4528 71.37711 l
207.13248 70.672779 l
207.81216 67.188606 l
208.49184 69.001347 l
209.17152 67.907823 l
209.8512 67.65363 l
211.21056 68.25349 l
211.89024 68.989751 l
213.92928 72.180357 l
214.60896 73.456287 l
217.32768 77.533901 l
218.00736 78.162401 l
218.68704 79.083064 l
219.36672 79.606607 l
220.0464 80.537571 l
220.72608 80.980266 l
221.40576 81.861395 l
223.4448 82.705255 l
224.12448 82.611732 l
224.80416 82.905891 l
225.48384 82.973957 l
226.16352 83.475225 l
226.8432 88.516002 l
227.52288 87.229339 l
228.20256 84.836802 l
228.88224 86.036685 l
229.56192 85.66815 l
230.2416 86.843384 l
230.92128 87.578781 l
231.60096 90.070234 l
232.28064 89.692153 l
232.96032 90.699759 l
234.31968 91.631047 l
234.99936 92.524203 l
235.67904 97.394439 l
236.35872 93.736436 l
237.0384 94.29509 l
237.71808 97.594483 l
238.39776 96.084045 l
239.07744 101.288407 l
239.75712 99.13151 l
240.4368 101.006814 l
241.11648 100.193427 l
241.79616 100.829208 l
242.47584 100.824947 l
243.15552 101.211118 l
243.8352 101.116679 l
244.51488 102.185554 l
245.19456 101.838647 l
245.87424 103.477988 l
246.55392 108.906879 l
247.2336 110.175689 l
247.91328 103.468549 l
248.59296 105.196235 l
249.27264 104.671344 l
249.95232 108.77571 l
250.632 111.128173 l
251.31168 106.963131 l
251.99136 107.497569 l
253.35072 109.542875 l
254.0304 109.034973 l
254.71008 113.445957 l
255.38976 113.244943 l
256.06944 110.968689 l
256.74912 112.304594 l
257.4288 112.628957 l
258.10848 116.985574 l
258.78816 117.394021 l
259.46784 114.982607 l
260.14752 114.390945 l
260.8272 115.067608 l
261.50688 115.091285 l
262.18656 115.777278 l
262.86624 116.269647 l
263.54592 117.312903 l
264.2256 117.867189 l
265.58496 120.415812 l
266.26464 118.988488 l
266.94432 118.580797 l
267.624 119.642121 l
268.30368 119.839575 l
268.98336 121.363604 l
269.66304 120.875335 l
270.34272 124.04577 l
271.0224 124.168848 l
271.70208 127.258921 l
272.38176 124.20698 l
273.06144 122.646923 l
273.74112 122.938547 l
274.4208 128.960287 l
275.10048 130.208656 l
275.78016 129.331896 l
276.45984 126.221328 l
277.13952 126.472232 l
277.8192 125.81272 l
278.49888 130.753557 l
279.85824 127.059795 l
280.53792 128.486526 l
281.2176 127.405893 l
281.89728 128.334214 l
282.57696 128.845136 l
284.616 129.170739 l
285.29568 129.924475 l
285.97536 129.628158 l
286.65504 131.359026 l
287.33472 130.580535 l
288.0144 131.404008 l
288.69408 131.660736 l
289.37376 132.607018 l
290.05344 137.397216 l
290.73312 132.199704 l
291.4128 132.100842 l
292.09248 132.801236 l
292.77216 133.664944 l
293.45184 136.009749 l
294.13152 133.202024 l
294.8112 135.466412 l
295.49088 134.363882 l
296.17056 137.06034 l
296.85024 134.821625 l
297.52992 139.199439 l
298.2096 135.338534 l
298.88928 137.61112 l
299.56896 135.863748 l
300.24864 136.387669 l
300.92832 137.148847 l
301.608 139.512799 l
302.28768 139.580001 l
302.96736 139.90911 l
303.64704 138.900911 l
304.32672 139.200949 l
305.0064 139.044862 l
305.68608 141.978039 l
306.36576 139.285411 l
307.04544 141.094214 l
307.72512 138.503899 l
308.4048 140.690028 l
309.08448 141.05824 l
309.76416 138.980141 l
310.44384 142.507515 l
311.12352 142.089145 l
311.8032 139.971296 l
312.48288 140.05538 l
313.16256 140.345494 l
313.84224 141.031434 l
314.52192 142.506922 l
315.2016 142.152733 l
315.88128 141.16298 l
316.56096 140.811866 l
317.24064 143.710094 l
317.92032 141.676545 l
318.6 142.87303 l
319.27968 142.219289 l
319.95936 142.845307 l
320.63904 142.751731 l
321.31872 142.468844 l
321.9984 144.93306 l
322.67808 142.378342 l
323.35776 142.752378 l
324.03744 143.555517 l
325.3968 144.339187 l
326.07648 145.488802 l
326.75616 144.053441 l
327.43584 144.20311 l
328.11552 144.557244 l
328.7952 145.498726 l
329.47488 144.792884 l
330.15456 143.793153 l
330.83424 145.238545 l
331.51392 145.469493 l
332.1936 146.763707 l
332.87328 146.99363 l
333.55296 144.662686 l
334.23264 145.08591 l
334.91232 144.477151 l
335.592 144.990069 l
336.27168 145.854424 l
336.95136 145.997566 l
337.63104 146.479903 l
338.31072 146.618407 l
338.9904 146.446949 l
339.67008 146.151657 l
340.34976 147.38239 l
341.02944 146.247175 l
341.70912 145.959327 l
342.3888 146.624178 l
343.06848 146.974375 l
343.74816 146.27274 l
344.42784 146.16293 l
345.10752 146.760525 l
345.7872 147.533892 l
346.46688 146.707075 l
347.14656 146.630542 l
347.82624 146.816886 l
348.50592 148.44695 l
349.86528 147.715436 l
351.22464 148.008247 l
351.90432 148.46901 l
352.584 147.822388 l
353.26368 147.99212 l
353.94336 148.87751 l
355.30272 147.773038 l
355.9824 148.656756 l
356.66208 148.924864 l
357.34176 147.954096 l
358.02144 148.016445 l
358.70112 147.882148 l
359.3808 149.378724 l
360.06048 148.386813 l
360.74016 149.386868 l
361.41984 148.695049 l
362.09952 149.619811 l
362.7792 148.908037 l
363.45888 148.681997 l
364.81824 148.940128 l
365.49792 148.784527 l
366.1776 148.793156 l
366.85728 149.098588 l
367.53696 149.782586 l
368.21664 149.841267 l
368.89632 149.293939 l
369.576 149.1954 l
370.25568 149.416694 l
370.93536 149.143353 l
371.61504 150.003016 l
372.29472 149.223284 l
375.01344 149.785067 l
375.69312 150.676012 l
376.3728 150.317239 l
377.05248 149.703787 l
377.73216 150.418204 l
378.41184 150.249713 l
379.09152 150.69683 l
379.7712 150.025183 l
380.45088 149.798442 l
381.13056 150.742459 l
381.81024 150.00636 l
382.48992 150.182241 l
383.1696 150.096377 l
384.52896 150.151606 l
385.20864 150.155381 l
385.88832 150.93603 l
386.568 150.496032 l
387.92736 150.487403 l
388.60704 151.017256 l
389.28672 150.336817 l
389.9664 150.993956 l
390.64608 150.298308 l
391.32576 150.679625 l
392.00544 150.584215 l
392.68512 150.62925 l
393.3648 150.534919 l
394.04448 150.735717 l
394.72416 150.508976 l
395.40384 151.053392 l
396.08352 150.605735 l
396.7632 151.208777 l
397.44288 150.758208 l
398.12256 150.773633 l
398.80224 151.03376 l
399.48192 151.112504 l
400.1616 150.978153 l
400.84128 151.384226 l
401.52096 151.164497 l
402.88032 151.385251 l
403.56 151.222099 l
403.56 151.222099 l
stroke
grestore
1.500 setlinewidth
0 setlinejoin
[] 0 setdash
0.000 setgray
gsave
63.72 59.508 m
63.72 228.481333 l
stroke
grestore
gsave
403.56 59.508 m
403.56 228.481333 l
stroke
grestore
gsave
63.72 59.508 m
403.56 59.508 l
stroke
grestore
gsave
63.72 228.481333 m
403.56 228.481333 l
stroke
grestore
3.000 setlinewidth
1 setlinejoin
0 setlinecap
[19.2 4.8 3 4.8] 0 setdash
1.000 0.000 0.000 setrgbcolor
gsave
267.622875 196.240269 m
321.622875 196.240269 l
stroke
grestore
0.000 setgray
/DejaVuSans findfont
9.000 scalefont
setfont
gsave
357.622875 193.090269 m
0.000000 0.000000 rmoveto
0.000000 rotate
(nR) show
grestore
2 setlinecap
[] 0 setdash
0.000 0.000 1.000 setrgbcolor
gsave
267.622875 97.521519 m
321.622875 97.521519 l
stroke
grestore
0.000 setgray
gsave
357.622875 94.371519 m
0.000000 0.000000 rmoveto
0.000000 rotate
(nL) show
grestore

end
showpage

%%EndDocument
 @endspecial -600 2694 a
 /End PSfrag
 -600 2694 a -600 -8789 a
 /Hide PSfrag
 -600
-8789 a -2265 -8651 a Fk(PSfrag)62 b(replacements)p -2265
-8586 1666 8 v -600 -8578 a
 /Unhide PSfrag
 -600 -8578 a -725 -8435 a
  {

-725 -8435 a 0 TeXcolorgray -850 -8383 a Fk(\(a\))p 0
TeXcolorgray -725 -8435 a
  } 0/Place PSfrag
 -725 -8435 a -726 -8196 a
  {
 -726
-8196 a 0 TeXcolorgray -852 -8144 a Fk(\(b\))p 0 TeXcolorgray
-726 -8196 a
  } 1/Place PSfrag
 -726 -8196 a -723 -7957 a
  {
 -723 -7957 a 0
TeXcolorgray -846 -7905 a Fk(\(c\))p 0 TeXcolorgray -723
-7957 a
  } 2/Place PSfrag
 -723 -7957 a -681 -7635 a
  {
 -681 -7635 a 0 TeXcolorgray
-175 w Fj(\000)p Fk(2)p 0 TeXcolorgray -681 -7635 a
  } 3/Place PSfrag
 -681
-7635 a -651 -7382 a
  {
 -651 -7382 a 0 TeXcolorgray -51
w Fk(0)p 0 TeXcolorgray -651 -7382 a
  } 4/Place PSfrag
 -651 -7382 a -730
-7143 a
  {
 -730 -7143 a 0 TeXcolorgray -130 w Fk(0)p Fi(:)p
Fk(5)p 0 TeXcolorgray -730 -7143 a
  } 5/Place PSfrag
 -730 -7143 a -651
-6904 a
  {
 -651 -6904 a 0 TeXcolorgray -51 w Fk(1)p 0 TeXcolorgray
-651 -6904 a
  } 6/Place PSfrag
 -651 -6904 a -651 -6665 a
  {
 -651 -6665 a 0
TeXcolorgray -51 w Fk(2)p 0 TeXcolorgray -651 -6665 a
  } 7/Place PSfrag

-651 -6665 a -730 -6426 a
  {
 -730 -6426 a 0 TeXcolorgray
-130 w Fk(2)p Fi(:)p Fk(2)p 0 TeXcolorgray -730 -6426
a
  } 8/Place PSfrag
 -730 -6426 a -730 -6187 a
  {
 -730 -6187 a 0 TeXcolorgray
-130 w Fk(2)p Fi(:)p Fk(4)p 0 TeXcolorgray -730 -6187
a
  } 9/Place PSfrag
 -730 -6187 a -730 -5948 a
  {
 -730 -5948 a 0 TeXcolorgray
-130 w Fk(2)p Fi(:)p Fk(6)p 0 TeXcolorgray -730 -5948
a
  } 10/Place PSfrag
 -730 -5948 a -651 -5708 a
  {
 -651 -5708 a 0 TeXcolorgray
-51 w Fk(3)p 0 TeXcolorgray -651 -5708 a
  } 11/Place PSfrag
 -651 -5708 a
-651 -5469 a
  {
 -651 -5469 a 0 TeXcolorgray -51 w Fk(6)p
0 TeXcolorgray -651 -5469 a
  } 12/Place PSfrag
 -651 -5469 a -651 -5230 a
  {

-651 -5230 a 0 TeXcolorgray -51 w Fk(9)p 0 TeXcolorgray
-651 -5230 a
  } 13/Place PSfrag
 -651 -5230 a -681 -5005 a
  {
 -681 -5005 a 0
TeXcolorgray -175 w Fj(\000)p Fk(4)p 0 TeXcolorgray -681
-5005 a
  } 14/Place PSfrag
 -681 -5005 a -651 -4752 a
  {
 -651 -4752 a 0 TeXcolorgray
-51 w Fk(4)p 0 TeXcolorgray -651 -4752 a
  } 15/Place PSfrag
 -651 -4752 a
-651 -4513 a
  {
 -651 -4513 a 0 TeXcolorgray -51 w Fk(5)p
0 TeXcolorgray -651 -4513 a
  } 16/Place PSfrag
 -651 -4513 a -701 -4274 a
  {

-701 -4274 a 0 TeXcolorgray -101 w Fk(10)p 0 TeXcolorgray
-701 -4274 a
  } 17/Place PSfrag
 -701 -4274 a -651 -4035 a
  {
 -651 -4035 a 0
TeXcolorgray -51 w Fk(8)p 0 TeXcolorgray -651 -4035 a
  } 18/Place PSfrag

-651 -4035 a -748 -3796 a
  {
 -748 -3796 a 0 TeXcolorgray
-55 w Fk(12)p 0 TeXcolorgray -748 -3796 a
  } 19/Place PSfrag
 -748 -3796
a -730 -3556 a
  {
 -730 -3556 a 0 TeXcolorgray -130 w Fk(0)p
Fi(:)p Fk(0)p 0 TeXcolorgray -730 -3556 a
  } 20/Place PSfrag
 -730 -3556
a -730 -3317 a
  {
 -730 -3317 a 0 TeXcolorgray -130 w Fk(1)p
Fi(:)p Fk(2)p 0 TeXcolorgray -730 -3317 a
  } 21/Place PSfrag
 -730 -3317
a -730 -3078 a
  {
 -730 -3078 a 0 TeXcolorgray -130 w Fk(0)p
Fi(:)p Fk(8)p 0 TeXcolorgray -730 -3078 a
  } 22/Place PSfrag
 -730 -3078
a -730 -2839 a
  {
 -730 -2839 a 0 TeXcolorgray -130 w Fk(1)p
Fi(:)p Fk(0)p 0 TeXcolorgray -730 -2839 a
  } 23/Place PSfrag
 -730 -2839
a -781 -2600 a
  {
 -781 -2600 a 0 TeXcolorgray -181 w Fk(0)p
Fi(:)p Fk(25)p 0 TeXcolorgray -781 -2600 a
  } 24/Place PSfrag
 -781 -2600
a -781 -2361 a
  {
 -781 -2361 a 0 TeXcolorgray -181 w Fk(0)p
Fi(:)p Fk(30)p 0 TeXcolorgray -781 -2361 a
  } 25/Place PSfrag
 -781 -2361
a -926 -2122 a
  {
 -926 -2122 a 0 TeXcolorgray -137 w Fk(0)p
Fi(:)p Fk(706)p 0 TeXcolorgray -926 -2122 a
  } 26/Place PSfrag
 -926 -2122
a -674 -1883 a
  {
 -674 -1883 a 0 TeXcolorgray -74 w Fh(0)p
Fg(:)p Fh(706)p 0 TeXcolorgray -674 -1883 a
  } 27/Place PSfrag
 -674 -1883
a -832 -1644 a
  {
 -832 -1644 a 0 TeXcolorgray -231 w Fk(0)p
Fi(:)p Fk(709)p 0 TeXcolorgray -832 -1644 a
  } 28/Place PSfrag
 -832 -1644
a -561 -1405 a
  {
 -561 -1405 a 0 TeXcolorgray -186 w Fh(0)p
Fg(:)p Fh(712)p 0 TeXcolorgray -561 -1405 a
  } 29/Place PSfrag
 -561 -1405
a -648 -1165 a
  {
 -648 -1165 a 0 TeXcolorgray -415 w Fk(0)p
Fi(:)p Fk(712)p 0 TeXcolorgray -648 -1165 a
  } 30/Place PSfrag
 -648 -1165
a -559 -972 a
  {
 -559 -972 a 0 TeXcolorgray -669 -997 a
Ff(\026)-26 b Fe(n)-649 -992 y(\013)p -677 -986 68 3
v -677 -940 a(n)-653 -954 y Ff(th)-654 -926 y Fe(\013)p
0 TeXcolorgray -559 -972 a
  } 31/Place PSfrag
 -559 -972 a -1042 -717 a
  {
 -1042
-717 a 0 TeXcolorgray -442 w Fi(\025)22 b Fk(=)g(0)p
Fi(:)p Fk(05\000)-699 -687 y Fd(S)p 0 TeXcolorgray -1042
-717 a
  } 32/Place PSfrag
 -1042 -717 a -991 -478 a
  {
 -991 -478 a 0 TeXcolorgray
-391 w Fi(\025)g Fk(=)g(0)p Fi(:)p Fk(2\000)-698 -448
y Fd(S)p 0 TeXcolorgray -991 -478 a
  } 33/Place PSfrag
 -991 -478 a -865
-265 a
  {
 -865 -265 a 0 TeXcolorgray -251 w Fk(\026)-116
b Fi(n)-1028 -236 y Fd(L)-937 -265 y Fi(=n)-729 -338
y Fc(th)-734 -209 y Fd(L)p 0 TeXcolorgray -865 -265 a
  } 34/Place PSfrag

-865 -265 a -874 -26 a
  {
 -874 -26 a 0 TeXcolorgray -260
w Fk(\026)g Fi(n)-1046 4 y Fd(R)-937 -26 y Fi(=n)-729
-99 y Fc(th)-734 30 y Fd(R)p 0 TeXcolorgray -874 -26
a
  } 35/Place PSfrag
 -874 -26 a -831 225 a
  {
 -831 225 a 0 TeXcolorgray -231
w Fi(\017)62 b Fk([\000)-754 255 y Fd(S)-655 225 y Fk(])p
0 TeXcolorgray -831 225 a
  } 36/Place PSfrag
 -831 225 a -875 464 a
  {
 -875
464 a 0 TeXcolorgray -276 w Fi(I)-1085 494 y Fd(\013)-922
464 y Fk([)p Fi(e)13 b Fk(\000])p 0 TeXcolorgray -875
464 a
  } 37/Place PSfrag
 -875 464 a -676 734 a
  {
 -676 734 a 0 TeXcolorgray
-76 w Fg(\017)21 b Fh([\000)-652 743 y Fe(S)-618 734
y Fh(])p 0 TeXcolorgray -676 734 a
  } 38/Place PSfrag
 -676 734 a -915 942
a
  {
 -915 942 a 0 TeXcolorgray -314 w Fi(e)13 b(V)108 b
Fk([\000)-754 972 y Fd(S)-655 942 y Fk(])p 0 TeXcolorgray
-915 942 a
  } 39/Place PSfrag
 -915 942 a -760 1199 a
  {
 -760 1199 a 0 TeXcolorgray
-160 w Fi(\021)-805 1099 y Fc(\()p Fd(L)p Fc(\))-812
1259 y(loc)p 0 TeXcolorgray -760 1199 a
  } 40/Place PSfrag
 -760 1199 a -745
1465 a
  {
 -745 1465 a 0 TeXcolorgray -145 w Fi(\021)-782
1495 y Fc(NL)p 0 TeXcolorgray -745 1465 a
  } 41/Place PSfrag
 -745 1465 a
-875 1693 a
  {
 -875 1693 a 0 TeXcolorgray -276 w Fi(I)-1085
1723 y Fd(\013)-922 1693 y Fk([)p Fi(e)13 b Fk(\000])p
0 TeXcolorgray -875 1693 a
  } 42/Place PSfrag
 -875 1693 a -865 1967 a
  {
 -865
1967 a 0 TeXcolorgray -863 1954 a Fh(\026)-865 1967 y
Fg(\016)n Fh(=)m Fg(!)-754 1976 y Fe(L)-729 1967 y Fb(\000)s
Fg(!)-638 1976 y Fe(R)p 0 TeXcolorgray -865 1967 a
  } 43/Place PSfrag
 -865
1967 a -749 2207 a
  {
 -749 2207 a 0 TeXcolorgray -747 2194
a Fh(\026)-749 2207 y Fg(\016)o Fh(=)m Fg(!)-637 2216
y Fe(R)p 0 TeXcolorgray -749 2207 a
  } 44/Place PSfrag
 -749 2207 a -743
2446 a
  {
 -743 2446 a 0 TeXcolorgray -741 2433 a Fh(\026)-743
2446 y Fg(\016)n Fh(=)m Fg(!)-632 2455 y Fe(L)p 0 TeXcolorgray
-743 2446 a
  } 45/Place PSfrag
 -743 2446 a -781 2685 a
  {
 -781 2685 a 0 TeXcolorgray
-779 2672 a Fh(\026)-781 2685 y Fg(\016)o Fh(=)m(2)p
Fg(!)-637 2694 y Fe(R)p 0 TeXcolorgray -781 2685 a
  } 46/Place PSfrag
 -781
2685 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1149
2943 a Fa(1)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
